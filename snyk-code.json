{"$schema": "https://docs.oasis-open.org/sarif/sarif/v2.1.0/csprd01/schemas/sarif-schema-2.1.0.json","version": "2.1.0","runs": [{"tool": {"driver" : {"name" : "snyk-cli","semanticVersion" : "1.1295.2","version" : "1.1295.2","informationUri" : "https://docs.snyk.io/","rules" : [{"id": "java/CodeInjection","name": "CodeInjection","shortDescription": {"text": "Code Injection"},"defaultConfiguration": {"level": "error"},"help": {"markdown": "## Details\n\nA secure code injection attack occurs when the attacker exploits an existing input processing vulnerability, passing special characters and code directly to a web-based application or site. The code is then executed, potentially granting the user system access to export sensitive data, to install malware, or even to move laterally and to exploit other systems in the trusted internal network environment. While code injection attacks can take place in several ways, the common factor is allowing the user to submit executable code to the application. The most common forms of code injection are SQL injection (server side) and cross-site scripting (XSS) (client side).\n\n## Best practices for prevention\n- Never trust user input. Assume any input may transmit harmful values.\n- Apply least privilege principle (for example, limit users to read only wherever possible).\n- Avoid passing raw user input directly to functions; use parameterized queries to extract data first.\n- Sanitize user input strings of special characters such as ?, &, /, <, >, and quotation marks.\n- Use whitelisting of known good values.\n- Validate user input against expected response types.\n- Escape shell commands with functions such as shlex for Python, or escapeshellarg for PHP.\n- Remember that code injection can take place on multiple fronts: GET and POST requests, but also cookies and HTTP headers.\n- Ensure up-to-date patching across all systems to remediate known vulnerabilities so these cannot be exploited by code injection.\n- Educate all team members on safe data handling procedures to prevent attacks.","text": ""},"properties": {"tags": ["java","CodeInjection","Security","SourceServer","SourceHttpParam","Taint"],"categories": ["Security"],"exampleCommitFixes": [{"commitURL": "https://github.com/omegat-org/omegat/commit/9f1adf097536da547a6cbb377b339386ff7610f3?diff=split#diff-b9c397d8d57405ba39791854834e57b6419f6188ff5a52cd146bd547889135c0L-1","lines": [{"line": "Map<String, Object> response = (Map<String, Object>) engine.eval(\"Java.asJSONCompatible(\" + json + ')');\n","lineNumber": 222,"lineChange": "removed"},{"line": "Map<String, Object> response = (Map<String, Object>) JsonParser.parse(json);\n","lineNumber": 217,"lineChange": "added"}]},{"commitURL": "https://github.com/Querz/mcaselector/commit/2cfd2bf3d2721b8deaa9b213ce0f6f772703e57c?diff=split#diff-d0164b64a770259f8c5f77e0cc62785a48c2c65899541817809483dd4d1e6a8dL-1","lines": [{"line": "import javax.script.ScriptEngine;\n","lineNumber": 3,"lineChange": "removed"},{"line": "import javax.script.ScriptEngineManager;\n","lineNumber": 4,"lineChange": "removed"},{"line": "import org.json.JSONException;\n","lineNumber": 3,"lineChange": "added"},{"line": "import org.json.JSONObject;\n","lineNumber": 4,"lineChange": "added"},{"line": "import java.io.BufferedReader;\n","lineNumber": 5,"lineChange": "none"},{"line": "import java.io.IOException;\n","lineNumber": 6,"lineChange": "none"},{"line": "import java.io.InputStreamReader;\n","lineNumber": 7,"lineChange": "none"},{"line": "import java.net.HttpURLConnection;\n","lineNumber": 8,"lineChange": "none"},{"line": "import java.net.URL;\n","lineNumber": 9,"lineChange": "none"},{"line": "import java.util.Map;\n","lineNumber": 10,"lineChange": "none"},{"line": "\n","lineNumber": 11,"lineChange": "none"},{"line": "public class VersionChecker {\n","lineNumber": 12,"lineChange": "none"},{"line": "\n","lineNumber": 13,"lineChange": "none"},{"line": "\tprivate static final String endpointTemplate = \"https://api.github.com/repos/%s/%s/releases/latest\";\n","lineNumber": 14,"lineChange": "none"},{"line": "\n","lineNumber": 15,"lineChange": "none"},{"line": "\tprivate final ScriptEngine engine;\n","lineNumber": 16,"lineChange": "none"},{"line": "\n","lineNumber": 17,"lineChange": "none"},{"line": "\tprivate final String owner;\n","lineNumber": 18,"lineChange": "none"},{"line": "\tprivate final String repository;\n","lineNumber": 19,"lineChange": "none"},{"line": "\n","lineNumber": 20,"lineChange": "none"},{"line": "\tpublic VersionChecker(String owner, String repository) {\n","lineNumber": 21,"lineChange": "none"},{"line": "\t\tthis.owner = owner;\n","lineNumber": 22,"lineChange": "none"},{"line": "\t\tthis.repository = repository;\n","lineNumber": 23,"lineChange": "none"},{"line": "\t\tScriptEngineManager scriptEngineManager = new ScriptEngineManager();\n","lineNumber": 24,"lineChange": "none"},{"line": "\t\tengine = scriptEngineManager.getEngineByName(\"javascript\");\n","lineNumber": 25,"lineChange": "none"},{"line": "\t}\n","lineNumber": 26,"lineChange": "none"},{"line": "\n","lineNumber": 27,"lineChange": "none"},{"line": "\tpublic VersionData fetchLatestVersion() throws Exception {\n","lineNumber": 28,"lineChange": "none"},{"line": "\t\tString endpoint = String.format(endpointTemplate, owner, repository);\n","lineNumber": 29,"lineChange": "none"},{"line": "\t\tURL url = new URL(endpoint);\n","lineNumber": 30,"lineChange": "none"},{"line": "\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();\n","lineNumber": 31,"lineChange": "none"},{"line": "\t\tconnection.setRequestMethod(\"GET\");\n","lineNumber": 32,"lineChange": "none"},{"line": "\n","lineNumber": 33,"lineChange": "none"},{"line": "\t\tStringBuilder stringBuilder = new StringBuilder();\n","lineNumber": 34,"lineChange": "none"},{"line": "\t\ttry (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {\n","lineNumber": 35,"lineChange": "none"},{"line": "\t\t\tString line;\n","lineNumber": 36,"lineChange": "none"},{"line": "\t\t\twhile ((line = reader.readLine()) != null) {\n","lineNumber": 37,"lineChange": "none"},{"line": "\t\t\t\tstringBuilder.append(line);\n","lineNumber": 38,"lineChange": "none"},{"line": "\t\t\t}\n","lineNumber": 39,"lineChange": "none"},{"line": "\t\t}\n","lineNumber": 40,"lineChange": "none"},{"line": "\t\treturn parseJson(stringBuilder.toString());\n","lineNumber": 41,"lineChange": "none"},{"line": "\t}\n","lineNumber": 42,"lineChange": "none"},{"line": "\n","lineNumber": 43,"lineChange": "none"},{"line": "\t// a dirty way to parse json without using any 3rd party dependency.\n","lineNumber": 44,"lineChange": "removed"},{"line": "\tprivate VersionData parseJson(String json) throws Exception {\n","lineNumber": 45,"lineChange": "removed"},{"line": "\t\tString script = \"Java.asJSONCompatible(\" + json + \")\";\n","lineNumber": 46,"lineChange": "removed"},{"line": "\t\tObject result = engine.eval(script);\n","lineNumber": 47,"lineChange": "removed"},{"line": "\t\tif (!(result instanceof Map)) {\n","lineNumber": 48,"lineChange": "removed"},{"line": "\t\t\tthrow new IOException(\"could not parse json\");\n","lineNumber": 49,"lineChange": "removed"},{"line": "\t\t}\n","lineNumber": 50,"lineChange": "removed"},{"line": "\tprivate VersionData parseJson(String json) throws JSONException {\n","lineNumber": 37,"lineChange": "added"},{"line": "\t\tJSONObject result = new JSONObject(json);\n","lineNumber": 38,"lineChange": "added"}]},{"commitURL": "https://github.com/cloudfoundry/uaa/commit/540579f9c3513d5f2dce6bae3eefde848f900f5f?diff=split#diff-46a26ec5f0297e2e32ee00be732b0deb3907067f47d0b019fecd9d392b810926L-1","lines": [{"line": "import org.springframework.expression.spel.SpelParseException;\n","lineNumber": 14,"lineChange": "added"},{"line": "import org.springframework.expression.spel.standard.SpelExpressionParser;\n","lineNumber": 15,"lineChange": "none"},{"line": "import org.springframework.expression.spel.support.StandardEvaluationContext;\n","lineNumber": 16,"lineChange": "none"},{"line": "import org.springframework.http.HttpStatus;\n","lineNumber": 17,"lineChange": "none"},{"line": "import org.springframework.stereotype.Controller;\n","lineNumber": 18,"lineChange": "none"},{"line": "import org.springframework.util.Assert;\n","lineNumber": 19,"lineChange": "none"},{"line": "import org.springframework.web.bind.annotation.PathVariable;\n","lineNumber": 20,"lineChange": "none"},{"line": "import org.springframework.web.bind.annotation.RequestBody;\n","lineNumber": 21,"lineChange": "none"},{"line": "import org.springframework.web.bind.annotation.RequestMapping;\n","lineNumber": 22,"lineChange": "none"},{"line": "import org.springframework.web.bind.annotation.RequestMethod;\n","lineNumber": 23,"lineChange": "none"},{"line": "import org.springframework.web.bind.annotation.RequestParam;\n","lineNumber": 24,"lineChange": "none"},{"line": "import org.springframework.web.bind.annotation.ResponseBody;\n","lineNumber": 25,"lineChange": "none"},{"line": "import org.springframework.web.bind.annotation.ResponseStatus;\n","lineNumber": 26,"lineChange": "none"},{"line": "\n","lineNumber": 27,"lineChange": "none"},{"line": "/**\n","lineNumber": 28,"lineChange": "none"},{"line": " * \n","lineNumber": 29,"lineChange": "none"},{"line": " * @author Luke Taylor\n","lineNumber": 30,"lineChange": "none"},{"line": " * @author Dave Syer\n","lineNumber": 31,"lineChange": "none"},{"line": " */\n","lineNumber": 32,"lineChange": "none"},{"line": "@Controller\n","lineNumber": 33,"lineChange": "none"},{"line": "public class ScimUserEndpoints implements InitializingBean {\n","lineNumber": 34,"lineChange": "none"},{"line": "\n","lineNumber": 35,"lineChange": "none"},{"line": "\tprivate final Log logger = LogFactory.getLog(getClass());\n","lineNumber": 36,"lineChange": "none"},{"line": "\n","lineNumber": 37,"lineChange": "none"},{"line": "\tprivate ScimUserProvisioning dao;\n","lineNumber": 38,"lineChange": "none"},{"line": "\n","lineNumber": 39,"lineChange": "none"},{"line": "\tprivate Collection<String> schemas = Arrays.asList(ScimUser.SCHEMAS);\n","lineNumber": 40,"lineChange": "none"},{"line": "\n","lineNumber": 41,"lineChange": "none"},{"line": "\t@RequestMapping(value = \"/User/{userId}\", method = RequestMethod.GET)\n","lineNumber": 42,"lineChange": "none"},{"line": "\t@ResponseBody\n","lineNumber": 43,"lineChange": "none"},{"line": "\tpublic ScimUser getUser(@PathVariable String userId) {\n","lineNumber": 44,"lineChange": "none"},{"line": "\t\treturn dao.retrieveUser(userId);\n","lineNumber": 45,"lineChange": "none"},{"line": "\t}\n","lineNumber": 46,"lineChange": "none"},{"line": "\n","lineNumber": 47,"lineChange": "none"},{"line": "\t@RequestMapping(value = \"/User\", method = RequestMethod.POST)\n","lineNumber": 48,"lineChange": "none"},{"line": "\t@ResponseStatus(HttpStatus.CREATED)\n","lineNumber": 49,"lineChange": "none"},{"line": "\t@ResponseBody\n","lineNumber": 50,"lineChange": "none"},{"line": "\tpublic ScimUser createUser(@RequestBody ScimUser user) {\n","lineNumber": 51,"lineChange": "none"},{"line": "\t\treturn dao.createUser(user);\n","lineNumber": 52,"lineChange": "none"},{"line": "\t}\n","lineNumber": 53,"lineChange": "none"},{"line": "\n","lineNumber": 54,"lineChange": "none"},{"line": "\t@RequestMapping(value = \"/User/{userId}\", method = RequestMethod.PUT)\n","lineNumber": 55,"lineChange": "none"},{"line": "\t@ResponseBody\n","lineNumber": 56,"lineChange": "none"},{"line": "\tpublic ScimUser updateUser(@RequestBody ScimUser user, @PathVariable String userId) {\n","lineNumber": 57,"lineChange": "none"},{"line": "\t\treturn dao.updateUser(userId, user);\n","lineNumber": 58,"lineChange": "none"},{"line": "\t}\n","lineNumber": 59,"lineChange": "none"},{"line": "\n","lineNumber": 60,"lineChange": "none"},{"line": "\t@RequestMapping(value = \"/User/{userId}\", method = RequestMethod.DELETE)\n","lineNumber": 61,"lineChange": "none"},{"line": "\t@ResponseBody\n","lineNumber": 62,"lineChange": "none"},{"line": "\tpublic ScimUser deleteUser(@PathVariable String userId) {\n","lineNumber": 63,"lineChange": "none"},{"line": "\t\treturn dao.removeUser(userId);\n","lineNumber": 64,"lineChange": "none"},{"line": "\t}\n","lineNumber": 65,"lineChange": "none"},{"line": "\n","lineNumber": 66,"lineChange": "none"},{"line": "\t@RequestMapping(value = \"/Users/{filter}\", method = RequestMethod.GET)\n","lineNumber": 67,"lineChange": "none"},{"line": "\t@ResponseBody\n","lineNumber": 68,"lineChange": "none"},{"line": "\tpublic SearchResults<Map<String, Object>> findUsers(@PathVariable String attributesCommaSeparated, @PathVariable String filter,\n","lineNumber": 68,"lineChange": "none"},{"line": "\t\t\t@RequestParam(required = false, defaultValue = \"1\") int startIndex,\n","lineNumber": 69,"lineChange": "none"},{"line": "\t\t\t@RequestParam(required = false, defaultValue = \"100\") int count) {\n","lineNumber": 71,"lineChange": "none"},{"line": "\n","lineNumber": 72,"lineChange": "none"},{"line": "\t\tCollection<ScimUser> input = dao.retrieveUsers();\n","lineNumber": 73,"lineChange": "none"},{"line": "\t\tCollection<Map<String, Object>> users = new ArrayList<Map<String, Object>>();\n","lineNumber": 74,"lineChange": "none"},{"line": "\n","lineNumber": 75,"lineChange": "none"},{"line": "\t\tfilter = filter.replace(\" eq \", \" == \").replace(\" pr\", \"!=null\").replace(\" ge \", \" >= \")\n","lineNumber": 75,"lineChange": "removed"},{"line": "\t\t\t\t.replace(\" le \", \" <= \").replace(\" gt \", \" > \").replace(\" lt \", \" < \");\n","lineNumber": 76,"lineChange": "removed"},{"line": "\t\tString spel = filter.replace(\" eq \", \" == \").replace(\" pr\", \"!=null\").replace(\" ge \", \" >= \")\n","lineNumber": 76,"lineChange": "added"},{"line": "\t\t\t\t.replace(\" le \", \" <= \").replace(\" gt \", \" > \").replace(\" lt \", \" < \")\n","lineNumber": 77,"lineChange": "added"},{"line": "\t\t\t\t.replaceAll(\" co '(.*?)'\", \".contains('$1')\").replaceAll(\" sw '(.*?)'\", \".startsWith('$1')\");\n","lineNumber": 78,"lineChange": "added"},{"line": "\n","lineNumber": 79,"lineChange": "none"},{"line": "\t\tlogger.debug(\"Filtering users with SpEL: \" + filter);\n","lineNumber": 78,"lineChange": "none"},{"line": "\n","lineNumber": 81,"lineChange": "none"},{"line": "\t\tStandardEvaluationContext context = new StandardEvaluationContext();\n","lineNumber": 82,"lineChange": "none"},{"line": "\t\tExpression expression = new SpelExpressionParser().parseExpression(filter);\n","lineNumber": 81,"lineChange": "removed"},{"line": "\t\tExpression expression;\n","lineNumber": 83,"lineChange": "added"},{"line": "\t\ttry {\n","lineNumber": 84,"lineChange": "added"},{"line": "\t\t\texpression = new SpelExpressionParser().parseExpression(spel);\n","lineNumber": 85,"lineChange": "added"},{"line": "\t\t}\n","lineNumber": 86,"lineChange": "added"},{"line": "\t\tcatch (SpelParseException e) {\n","lineNumber": 87,"lineChange": "added"},{"line": "\t\t\tthrow new ScimException(\"Invalid filter expression: [\" + filter + \"]\", HttpStatus.BAD_REQUEST);\n","lineNumber": 88,"lineChange": "added"},{"line": "\t\t}\n","lineNumber": 89,"lineChange": "added"}]}],"exampleCommitDescriptions": [],"precision": "very-high","repoDatasetSize": 4,"cwe": ["CWE-94"]}},{"id": "java/CommandInjection","name": "CommandInjection","shortDescription": {"text": "Command Injection"},"defaultConfiguration": {"level": "error"},"help": {"markdown": "## Details\n\nWith an OS command injection attack a web application user can pass commands directly to the system shell, attached to a legitimate request. These commands can then be executed on the application server, potentially leading to harmful consequences, including data exposure or deletion. Like code injection attacks, command injection attacks are essentially a failure of data validation. Unlike code injection attacks, which introduce new code, command injection attacks use existing system functions, often taking advantage of the application's unnecessarily high privilege level, increasing the risk of serious harm and reputational damage.\n\n## Best practices for prevention\n- Never trust user input. Assume any input may transmit harmful values.\n- Adopt the principle of least privilege: No application should have a greater access level than needed to run its required tasks.\n- Control user access policies on a task-by-task basis.\n- Don't pass user input directly to the system; use libraries or APIs that lack system access.\n- Where shell commands must be passed, escape values using functions like shlex for Python, or escapeshellarg() for PHP.\n- Sanitize user input with regular expressions to define permitted characters along with maximum string length.\n- Convert special characters such as `& |  ; $ > < \\ !` before passing to the server.\n- Whitelist permitted commands and validate user responses against these expectations.\n- Remember that code injection can take place on multiple fronts: GET and POST requests, but also cookies and HTTP headers.\n- Ensure up-to-date patching across all systems to remediate known vulnerabilities.\n- Educate all team members on safer data handling procedures to prevent attacks.","text": ""},"properties": {"tags": ["java","CommandInjection","Security","SourceServer","SourceHttpParam","Taint"],"categories": ["Security"],"exampleCommitFixes": [{"commitURL": "https://github.com/NationStates/NationStatesPlusPlus/commit/4f6bb7aba065d323250c7b30c66a4a7f28868cf5?diff=split#diff-c9ca617276c4e892faafef11062082ae4a848d4d702e29ada5dd464dd480ce4fL-1","lines": [{"line": "\tprivate static void changePassword(String user, String password) throws IOException {\n","lineNumber": 82,"lineChange": "removed"},{"line": "\t\tProcess cmdProc = Runtime.getRuntime().exec(new String[] {\"php\", \"/etc/mediawiki/maintenance/changePassword.php\", \"--user=\" + user + \"\", \"--password=\" + password + \"\"});\n","lineNumber": 83,"lineChange": "removed"},{"line": "\t\tBufferedReader stdoutReader = new BufferedReader(new InputStreamReader(cmdProc.getInputStream()));\n","lineNumber": 84,"lineChange": "removed"},{"line": "\t\tString line;\n","lineNumber": 85,"lineChange": "removed"},{"line": "\t\twhile ((line = stdoutReader.readLine()) != null) {\n","lineNumber": 86,"lineChange": "removed"},{"line": "\t\t\tLogger.info(\"[NSWIKI PASSWORD] \" + line);\n","lineNumber": 87,"lineChange": "removed"},{"line": "\t\t}\n","lineNumber": 88,"lineChange": "removed"},{"line": "\n","lineNumber": 89,"lineChange": "removed"},{"line": "\t\tBufferedReader stderrReader = new BufferedReader(new InputStreamReader(cmdProc.getErrorStream()));\n","lineNumber": 90,"lineChange": "removed"},{"line": "\t\twhile ((line = stderrReader.readLine()) != null) {\n","lineNumber": 91,"lineChange": "removed"},{"line": "\t\t\tLogger.warn(\"[NSWIKI PASSWORD] \" + line);\n","lineNumber": 92,"lineChange": "removed"},{"line": "\t\t}\n","lineNumber": 93,"lineChange": "removed"},{"line": "\tprivate static boolean changePassword(Connection conn, String user, String password) throws SQLException {\n","lineNumber": 87,"lineChange": "added"},{"line": "\t\tfinal String salt = new BigInteger(31, new Random()).toString(16);\n","lineNumber": 88,"lineChange": "added"},{"line": "\t\tfinal String hash = \":B:\" + salt + \":\" + DigestUtils.md5Hex(salt + \"-\" + DigestUtils.md5Hex(password));\n","lineNumber": 89,"lineChange": "added"},{"line": "\t\tPreparedStatement update = conn.prepareStatement(\"UPDATE nswiki.user SET user_password = ? WHERE user_name = ?\");\n","lineNumber": 90,"lineChange": "added"},{"line": "\t\tupdate.setString(1, hash);\n","lineNumber": 91,"lineChange": "added"},{"line": "\t\tupdate.setString(2, user);\n","lineNumber": 92,"lineChange": "added"},{"line": "\t\treturn update.executeUpdate() == 1;\n","lineNumber": 93,"lineChange": "added"}]},{"commitURL": "https://github.com/CallMeAldy/AK-Kernel-Updater/commit/028b0c3113852179c8d3afd76fea545a10fb7836?diff=split#diff-5de258eb0e61f25a3e6e9fe14eade6cb199783ebaaccf836a9b90b9db83a035dL-1","lines": [{"line": "        String res = null;\n","lineNumber": 94,"lineChange": "removed"},{"line": "        String md5hash = \"\";\n","lineNumber": 96,"lineChange": "added"},{"line": "        FileInputStream inputStream = null;\n","lineNumber": 97,"lineChange": "added"},{"line": "\n","lineNumber": 98,"lineChange": "added"},{"line": "        try {\n","lineNumber": 99,"lineChange": "none"},{"line": "            return new Scanner(Runtime.getRuntime().exec(String.format(\"md5 %s\", filePath)).getInputStream()).next();\n","lineNumber": 96,"lineChange": "removed"},{"line": "        } catch (Exception e) {\n","lineNumber": 97,"lineChange": "removed"},{"line": "            return res;\n","lineNumber": 98,"lineChange": "removed"},{"line": "\n","lineNumber": 100,"lineChange": "added"},{"line": "            inputStream = new FileInputStream(filePath);\n","lineNumber": 101,"lineChange": "added"},{"line": "            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n","lineNumber": 102,"lineChange": "added"},{"line": "\n","lineNumber": 103,"lineChange": "added"},{"line": "            byte[] buffer = new byte[1024];\n","lineNumber": 104,"lineChange": "added"},{"line": "\n","lineNumber": 105,"lineChange": "added"},{"line": "            int read;\n","lineNumber": 106,"lineChange": "added"},{"line": "            while ((read = inputStream.read(buffer)) != -1) {\n","lineNumber": 107,"lineChange": "added"},{"line": "                md.update(buffer, 0, read);\n","lineNumber": 108,"lineChange": "added"}]},{"commitURL": "https://github.com/Easy-doc/Easy-doc-core/commit/?diff=split#diff-6396bc415e9fcf6b66fa3b8da11010dbd90d7e64a7e47f67ddcc1733361eb9eaL-1","lines": [{"line": "    cookie=cookie.replaceAll(\"[;&amp;|`]*\",\"\").replaceAll(\"[;&|`]+\",\"\\\\u\" + Integer.toHexString('/' | 0x10000).substring(1));\n","lineNumber": 175,"lineChange": "added"},{"line": "    cmdBuilder.append(\" -C \").append(cookie);\n","lineNumber": 176,"lineChange": "none"},{"line": "}\n","lineNumber": 177,"lineChange": "none"},{"line": "if (!isGet) {\n","lineNumber": 178,"lineChange": "none"},{"line": "    String fileName = Constant.CUR_PATH + \"/postFile:\" + UUID.randomUUID().toString().substring(0, 5) + \".txt\";\n","lineNumber": 179,"lineChange": "none"},{"line": "    file = new File(fileName);\n","lineNumber": 180,"lineChange": "none"},{"line": "    FileOutputStream fileOutput = new FileOutputStream(file, false);\n","lineNumber": 181,"lineChange": "none"},{"line": "    OutputStreamWriter writer = new OutputStreamWriter(fileOutput, Charset.forName(\"UTF-8\"));\n","lineNumber": 182,"lineChange": "none"},{"line": "    writer.write(JSONObject.toJSONString(body.getBody()));\n","lineNumber": 183,"lineChange": "none"},{"line": "    writer.flush();\n","lineNumber": 184,"lineChange": "none"},{"line": "    cmdBuilder.append(\" -p \").append(fileName);\n","lineNumber": 185,"lineChange": "none"},{"line": "    cmdBuilder.append(\" -T \").append(\"application/json\");\n","lineNumber": 186,"lineChange": "none"},{"line": "}\n","lineNumber": 187,"lineChange": "none"},{"line": "url=url.replaceAll(\"[;&amp;|`]*\",\"\").replaceAll(\"[;&|`]+\",\"\\\\u\" + Integer.toHexString('/' | 0x10000).substring(1));\n","lineNumber": 188,"lineChange": "added"},{"line": "cmdBuilder.append(\" \").append(transRequest(url));\n","lineNumber": 189,"lineChange": "none"},{"line": "cmdBuilder.append(\"?\");\n","lineNumber": 190,"lineChange": "none"},{"line": "body.getParams().forEach((k, v) -> cmdBuilder.append(k).append(\"=\").append(v).append(\"&\"));\n","lineNumber": 191,"lineChange": "none"},{"line": "// 删除末尾&\n","lineNumber": 192,"lineChange": "none"},{"line": "cmdBuilder.deleteCharAt(cmdBuilder.length() - 1);\n","lineNumber": 193,"lineChange": "none"},{"line": "log.info(\"ab test: \" + cmdBuilder);\n","lineNumber": 194,"lineChange": "none"},{"line": "Process exec = Runtime.getRuntime().exec(cmdBuilder.toString());\n","lineNumber": 195,"lineChange": "none"}]}],"exampleCommitDescriptions": [],"precision": "very-high","repoDatasetSize": 30,"cwe": ["CWE-78"]}},{"id": "java/SpringCSRF","name": "SpringCSRF","shortDescription": {"text": "Spring Cross-Site Request Forgery (CSRF)"},"defaultConfiguration": {"level": "note"},"help": {"markdown": "\n## Details\n\nWhen a web server is designed to receive a request from a client without any mechanism for verifying that it was intentionally sent, then it might be possible for an attacker to trick a client into making an unintentional request to the web server which will be treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc. and can result in exposure of data or unintended code execution.\n\n## Best practices for prevention\n* Use a vetted library or framework which has anti-CSRF packages that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Consider including Spring Security library within your application.\n\n\n## References\n* [Spring Security Docs](https://docs.spring.io/spring-security/site/docs/5.0.x/reference/html/csrf.html)\n* [A Guide to CSRF Protection in Spring Security](https://www.baeldung.com/spring-security-csrf)","text": ""},"properties": {"tags": ["java","SpringCSRF","Security"],"categories": ["Security"],"exampleCommitFixes": [],"exampleCommitDescriptions": [],"precision": "very-high","repoDatasetSize": 0,"cwe": ["CWE-352"]}},{"id": "java/Sqli","name": "Sqli","shortDescription": {"text": "SQL Injection"},"defaultConfiguration": {"level": "error"},"help": {"markdown": "## Details\n\nIn an SQL injection attack, the user can submit an SQL query directly to the database, gaining access without providing appropriate credentials. Attackers can then view, export, modify, and delete confidential information; change passwords and other authentication information; and possibly gain access to other systems within the network. This is one of the most commonly exploited categories of vulnerability, but can largely be avoided through good coding practices.\n\n## Best practices for prevention\n* Avoid passing user-entered parameters directly to the SQL server.\n* Avoid using string concatenation to build SQL queries from user-entered parameters.\n* When coding, define SQL code first, then pass in parameters. Use prepared statements with parameterized queries. Examples include `SqlCommand()` in .NET and `bindParam()` in PHP.\n* Use strong typing for all parameters so unexpected user data will be rejected.\n* Where direct user input cannot be avoided for performance reasons, validate input against a very strict allowlist of permitted characters, avoiding special characters such as `? & / < > ; - ' \" \\` and spaces. Use a vendor-supplied escaping routine if possible.\n* Develop your application in an environment and/or using libraries that provide protection against SQL injection.\n* Harden your entire environment around a least-privilege model, ideally with isolated accounts with privileges only for particular tasks.","text": ""},"properties": {"tags": ["java","Sqli","Security","SourceServer","SourceHttpParam","Taint"],"categories": ["Security"],"exampleCommitFixes": [{"commitURL": "https://github.com/romainguefveneu/naonedbus/commit/221b7952f2720954617be208a32aa5d9c52fc2ad?diff=split#diff-e8e3d3bc49298718faa0faa152cbe9283b50dceacd56b4a535ceed55209d8757L-1","lines": [{"line": "queryBuilder.appendWhere(HoraireTable.YEAR + \" = \" + year);\n","lineNumber": 88,"lineChange": "removed"},{"line": "queryBuilder.appendWhere(\" AND \");\n","lineNumber": 89,"lineChange": "removed"},{"line": "queryBuilder.appendWhere(HoraireTable.DAY_OF_YEAR + \" = \" + dayOfYear);\n","lineNumber": 90,"lineChange": "removed"},{"line": "queryBuilder.appendWhere(HoraireTable.JOUR + \" = \");\n","lineNumber": 86,"lineChange": "added"},{"line": "queryBuilder.appendWhereEscapeString(jour);\n","lineNumber": 87,"lineChange": "added"}]},{"commitURL": "https://github.com/apache/incubator-brooklyn/commit/7c2b05e8f5d303c4ca8ddf41951f3469c1dff6d3?diff=split#diff-d4388a2198569fe21fe96a59744ad0eabc692c2cc2a8d400c7b2401030dc3167L-1","lines": [{"line": "stmt.execute(\"INSERT INTO MESSAGES values (default, '\"+request.getParameter(\"name\")+\r\n","lineNumber": 50,"lineChange": "removed"},{"line": "        \"', '\"+request.getParameter(\"message\")+\"')\");\r\n","lineNumber": 51,"lineChange": "removed"},{"line": "stmt.execute(\"INSERT INTO MESSAGES values (default, '\"+\r\n","lineNumber": 50,"lineChange": "added"},{"line": "        //better escaping and security desired... \r\n","lineNumber": 51,"lineChange": "added"},{"line": "        //this essentially does StringEscapeUtils.escapeSql (either brooklyn.util or apache commons)\r\n","lineNumber": 52,"lineChange": "added"},{"line": "        request.getParameter(\"name\").replaceAll(\"'\", \"''\")+\r\n","lineNumber": 53,"lineChange": "added"},{"line": "        \"', '\"+\r\n","lineNumber": 54,"lineChange": "added"},{"line": "        request.getParameter(\"message\").replaceAll(\"'\", \"''\")+\r\n","lineNumber": 55,"lineChange": "added"},{"line": "        \"')\");\r\n","lineNumber": 56,"lineChange": "added"}]},{"commitURL": "https://github.com/GeorgH93/Minepacks/commit/5dcbcc6a058d280df3e3165f0b4b316750494353?diff=split#diff-994252ffcaf61f5b85212f8ce7c7c43707c9141ea00ad8af471b10b776c9a2c2L-1","lines": [{"line": "rs.next();\n","lineNumber": 94,"lineChange": "removed"},{"line": "stmt.execute(\"ALTER TABLE `backpacks` ADD COLUMN `lastupdate` DATE DEFAULT '\" + rs.getString(1) + \"';\");\n","lineNumber": 95,"lineChange": "removed"},{"line": "stmt.execute(\"ALTER TABLE `backpacks` ADD COLUMN `lastupdate` DATE DEFAULT '2020-04-20';\");\n","lineNumber": 93,"lineChange": "added"}]}],"exampleCommitDescriptions": [],"precision": "very-high","repoDatasetSize": 99,"cwe": ["CWE-89"]}},{"id": "java/Ssrf","name": "Ssrf","shortDescription": {"text": "Server-Side Request Forgery (SSRF)"},"defaultConfiguration": {"level": "error"},"help": {"markdown": "\n## Details\nIn a server-side request forgery attack, a malicious user supplies a URL (an external URL or a network IP address such as 127.0.0.1) to the application's back end. The server then accesses the URL and shares its results, which may include sensitive information such as AWS metadata, internal configuration information, or database contents with the attacker. Because the request comes from the back end, it bypasses access controls, potentially exposing information the user does not have sufficient privileges to receive. The attacker can then exploit this information to gain access, modify the web application, or demand a ransom payment.\n\n## Best practices for prevention\n* Blacklists are problematic and attackers have numerous ways to bypass them; ideally, use a whitelist of all permitted domains and IP addresses.\n* Use authentication even within your own network to prevent exploitation of server-side requests.\n* Implement zero trust and sanitize and validate all URL and header data returning to the server from the user. Strip invalid or suspect characters, then inspect to be certain it contains a valid and expected value.\n* Ideally, avoid sending server requests based on user-provided data altogether.\n* Ensure that you are not sending raw response bodies from the server directly to the client. Only deliver expected responses.\n* Disable suspect and exploitable URL schemas. Common culprits include obscure and little-used schemas such as `file://`, `dict://`, `ftp://`, and `gopher://`.","text": ""},"properties": {"tags": ["java","Ssrf","Security","SourceServer","SourceHttpParam","Taint"],"categories": ["Security"],"exampleCommitFixes": [{"commitURL": "https://github.com/7ep/demo/commit/e93f8593e3f1d6e0ea3a10ae744be2e02d4f8044?diff=split#diff-bcdadda8cb556e0f84f5725c6ea8e7122b0c48354edd62d72e2638ab7ffe34f7L-1","lines": [{"line": "        String hostName = args[0];\n","lineNumber": 18,"lineChange": "removed"},{"line": "        int portNumber = Integer.parseInt(args[1]);\n","lineNumber": 19,"lineChange": "removed"},{"line": "        String hostName = \"localhost\";\n","lineNumber": 13,"lineChange": "added"},{"line": "        int portNumber = 8000;\n","lineNumber": 14,"lineChange": "added"},{"line": "\n","lineNumber": 20,"lineChange": "none"},{"line": "        try (\n","lineNumber": 21,"lineChange": "none"},{"line": "                Socket echoSocket = new Socket(hostName, portNumber);\n","lineNumber": 22,"lineChange": "none"}]},{"commitURL": "https://github.com/GdeiAssistant/GdeiAssistant/commit/f28206565c7ba272e2a5dc9f12c40bb4c477df23?diff=split#diff-6c36630f51b1f377474acffc5e2f67acd526b1f75eeff5cdc7a46770ff26eddaL-1","lines": [{"line": "httpGet = new HttpGet(url + evaluationList.get(0));\n","lineNumber": 103,"lineChange": "removed"},{"line": "    httpGet = new HttpGet(\"http://jwgl.gdei.edu.cn/\" + evaluationList.get(0));\n","lineNumber": 86,"lineChange": "added"}]},{"commitURL": "https://github.com/awsdocs/aws-doc-sdk-examples/commit/6c4505b87fc7ee7f19cde3c12cf6ab798d76d7ea?diff=split#diff-0d0c63a5c5d570eac01ee3c91fa21f2f47d4647cc81e39307afb9724712c9095L-1","lines": [{"line": "            PresignedPutObjectRequest presignedRequest =\n","lineNumber": 58,"lineChange": "removed"},{"line": "                    presigner.presignPutObject(z -> z.signatureDuration(Duration.ofMinutes(10))\n","lineNumber": 59,"lineChange": "removed"},{"line": "                            .putObjectRequest(por -> por.bucket(bucketName).key(keyName)));\n","lineNumber": 60,"lineChange": "removed"},{"line": "\n","lineNumber": 62,"lineChange": "added"},{"line": "            // Use a PutObjectRequest to set additional values\n","lineNumber": 63,"lineChange": "added"},{"line": "            PutObjectRequest objectRequest = PutObjectRequest.builder()\n","lineNumber": 64,"lineChange": "added"},{"line": "                    .bucket(bucketName)\n","lineNumber": 65,"lineChange": "added"},{"line": "                    .key(keyName)\n","lineNumber": 66,"lineChange": "added"},{"line": "                    .contentType(\"text/plain\")\n","lineNumber": 67,"lineChange": "added"},{"line": "                    .build();\n","lineNumber": 68,"lineChange": "added"},{"line": "\n","lineNumber": 69,"lineChange": "added"},{"line": "            PutObjectPresignRequest presignRequest = PutObjectPresignRequest.builder()\n","lineNumber": 70,"lineChange": "added"},{"line": "                    .signatureDuration(Duration.ofMinutes(10))\n","lineNumber": 71,"lineChange": "added"},{"line": "                    .putObjectRequest(objectRequest)\n","lineNumber": 72,"lineChange": "added"},{"line": "                    .build();\n","lineNumber": 73,"lineChange": "added"},{"line": "\n","lineNumber": 74,"lineChange": "added"},{"line": "            PresignedPutObjectRequest presignedRequest = presigner.presignPutObject(presignRequest);\n","lineNumber": 75,"lineChange": "added"},{"line": "\n","lineNumber": 76,"lineChange": "none"},{"line": "            System.out.println(\"Pre-signed URL to upload a file to: \" +\n","lineNumber": 77,"lineChange": "none"},{"line": "                    presignedRequest.url());\n","lineNumber": 78,"lineChange": "none"},{"line": "            System.out.println(\"Which HTTP method needs to be used when uploading a file: \" +\n","lineNumber": 79,"lineChange": "none"},{"line": "                    presignedRequest.httpRequest().method());\n","lineNumber": 80,"lineChange": "none"},{"line": "\n","lineNumber": 81,"lineChange": "none"},{"line": "            // Upload content to the bucket by using this URL\n","lineNumber": 82,"lineChange": "none"},{"line": "            URL url = presignedRequest.url();\n","lineNumber": 83,"lineChange": "none"},{"line": "\n","lineNumber": 84,"lineChange": "none"},{"line": "            // Create the connection and use it to upload the new object by using the pre-signed URL\n","lineNumber": 85,"lineChange": "none"},{"line": "            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n","lineNumber": 86,"lineChange": "none"}]}],"exampleCommitDescriptions": [],"precision": "very-high","repoDatasetSize": 147,"cwe": ["CWE-918"]}},{"id": "java/XSS","name": "XSS","shortDescription": {"text": "Cross-site Scripting (XSS)"},"defaultConfiguration": {"level": "error"},"help": {"markdown": "## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n## Best practices for prevention\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.","text": ""},"properties": {"tags": ["java","XSS","Security","SourceServer","SourceHttpBody","Taint"],"categories": ["Security"],"exampleCommitFixes": [{"commitURL": "https://github.com/NaveFarjun/MagitWeb/commit/1d1dfbfb3529f300a938005f4e5125222624c573?diff=split#diff-cda33ce748881132817fdfd59b6cf07422431a10222ec77cd3d3dac178c203efL-1","lines": [{"line": "resp.setContentType(\"application/json;charset=UTF-8\");\n","lineNumber": 18,"lineChange": "added"},{"line": "String userName = req.getParameter(\"userName\");\n","lineNumber": 19,"lineChange": "none"},{"line": "if (userName == null) {\n","lineNumber": 20,"lineChange": "none"},{"line": "    userName = SessionUtils.getUserName(req);\n","lineNumber": 21,"lineChange": "none"},{"line": "}\n","lineNumber": 22,"lineChange": "none"},{"line": "UserInSystem user=ServletUtils.getUserManaqer(getServletContext()).getUsers().get(userName);\n","lineNumber": 23,"lineChange": "none"},{"line": "Repository repository=user.getRepositories().get(req.getParameter(\"repName\"));\n","lineNumber": 24,"lineChange": "none"},{"line": "try(PrintWriter out=resp.getWriter()){\n","lineNumber": 25,"lineChange": "none"},{"line": "    Gson gson=new Gson();\n","lineNumber": 26,"lineChange": "none"},{"line": "    String json=gson.toJson(repository);\n","lineNumber": 27,"lineChange": "none"},{"line": "    out.println(json);\n","lineNumber": 28,"lineChange": "none"}]},{"commitURL": "https://github.com/OpenClinica/OpenClinica/commit/20d4fc43fa07322f7444fa4e18c6d71fbae92d85?diff=split#diff-59d03fffb0b89cbfff421502565d07302680cafb279c4cc424c6ba4b604dad33L-1","lines": [{"line": "<%@ page import=\"org.springframework.web.util.HtmlUtils\" %>\n","lineNumber": 2,"lineChange": "added"},{"line": "<jsp:useBean scope='request' id='presetValues' class='java.util.HashMap'/>\n","lineNumber": 3,"lineChange": "none"},{"line": "<%\n","lineNumber": 4,"lineChange": "none"},{"line": "String fieldName = request.getParameter(\"fieldName\");\n","lineNumber": 5,"lineChange": "none"},{"line": "Object fieldValue;\n","lineNumber": 6,"lineChange": "none"},{"line": "\n","lineNumber": 7,"lineChange": "none"},{"line": "if (presetValues.containsKey(fieldName)) {\n","lineNumber": 8,"lineChange": "none"},{"line": "\tfieldValue = presetValues.get(fieldName);\n","lineNumber": 9,"lineChange": "none"},{"line": "\t%>\n","lineNumber": 10,"lineChange": "none"},{"line": "<%= fieldValue.toString() %>\n","lineNumber": 10,"lineChange": "removed"},{"line": "<%= HtmlUtils.htmlEscape(fieldValue.toString()) %>\n","lineNumber": 11,"lineChange": "added"}]},{"commitURL": "https://github.com/halestudio/hale/commit/40d7b0dc89fde001c42ba3dc94fb81110df888a3?diff=split#diff-be9bbd5658ee33e7e23c7aae5d9ef1431c1337b1afc9918596ada29859747d38L-1","lines": [{"line": "response.setContentType(\"text/xml\");\n","lineNumber": 68,"lineChange": "added"},{"line": "response.setCharacterEncoding(\"UTF-8\");\n","lineNumber": 69,"lineChange": "added"},{"line": "PrintWriter writer = response.getWriter();\n","lineNumber": 70,"lineChange": "none"},{"line": "\n","lineNumber": 71,"lineChange": "none"},{"line": "// read file\n","lineNumber": 72,"lineChange": "none"},{"line": "FileReader fReader = new FileReader(file);\n","lineNumber": 73,"lineChange": "none"},{"line": "BufferedReader reader = new BufferedReader(fReader);\n","lineNumber": 74,"lineChange": "none"},{"line": "\n","lineNumber": 75,"lineChange": "none"},{"line": "String txt;\n","lineNumber": 76,"lineChange": "none"},{"line": "while ((txt = reader.readLine()) != null) {\n","lineNumber": 77,"lineChange": "none"},{"line": "\t// and write to screen\n","lineNumber": 78,"lineChange": "none"},{"line": "\twriter.println(txt);\n","lineNumber": 79,"lineChange": "none"}]}],"exampleCommitDescriptions": [],"precision": "very-high","repoDatasetSize": 102,"cwe": ["CWE-79"]}},{"id": "java/XXE","name": "XXE","shortDescription": {"text": "XML External Entity (XXE) Injection"},"defaultConfiguration": {"level": "error"},"help": {"markdown": "\n## Details\n\nFor convenience, XML documents can use system identifiers to enable access to stored content, whether local or remote. The XML processor then uses the system identifier to access the resource rather than using the URI. When this weakness exists, the application permits user-supplied data, which could include the address of an XML external identity, to be passed directly to the XML parser. The application will then attempt to retrieve documents from outside of secure, controlled areas.\n\nAttackers can exploit this weakness to expose sensitive data, execute port scanning on the server side, or launch a denial-of-service attack (DoS) such as Billion Laughs.\n\n## Best practices for prevention\n* When possible, disable loading of data from external entities. The method of doing this will vary based on the language and XML parser being used.\n* Use a local, static document type definitions (DTDs) and ensure that external DTDs are disallowed entirely.\n* If user input cannot be avoided, perform validation against an allowlist of possible data sources. However, as long as external DTDs are allowed, XML code remains inherently vulnerable to attacks exploiting this weakness.","text": ""},"properties": {"tags": ["java","XXE","Security","SourceServer","SourceHttpBody","Taint"],"categories": ["Security"],"exampleCommitFixes": [{"commitURL": "https://github.com/vespa-engine/vespa/commit/610f41d9904de453ed3e4bfbbfb50700463fd670?diff=split#diff-d7960aa3dee113734822a81c452cf2c7579d243ab7760f7259ef060bb94179a7L-1","lines": [{"line": "        DocumentBuilder docBuilder = null;\n","lineNumber": 41,"lineChange": "removed"},{"line": "        try { // XXE prevention\n","lineNumber": 39,"lineChange": "added"},{"line": "            dbf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n","lineNumber": 40,"lineChange": "added"},{"line": "        }\n","lineNumber": 41,"lineChange": "added"},{"line": "        catch (ParserConfigurationException e) {\n","lineNumber": 42,"lineChange": "added"},{"line": "            throw new IllegalStateException(\"Could not disallow-doctype-decl\", e);\n","lineNumber": 43,"lineChange": "added"},{"line": "        }\n","lineNumber": 44,"lineChange": "added"},{"line": "        DocumentBuilder docBuilder;\n","lineNumber": 45,"lineChange": "added"},{"line": "\n","lineNumber": 46,"lineChange": "none"},{"line": "        try {\n","lineNumber": 47,"lineChange": "none"},{"line": "            docBuilder = dbf.newDocumentBuilder();\n","lineNumber": 48,"lineChange": "none"},{"line": "            Document doc = docBuilder.parse(file);\n","lineNumber": 49,"lineChange": "none"}]},{"commitURL": "https://github.com/wso2/carbon-device-mgt/commit/ee5b077e6a1fd074473adfe76905844d7bb3c6e1?diff=split#diff-dacd782d0ff47d46f712a406b833ebc0b402f99f819fd4953469687234066474L-1","lines": [{"line": "import javax.xml.XMLConstants;\n","lineNumber": 23,"lineChange": "added"},{"line": "import javax.xml.parsers.DocumentBuilder;\n","lineNumber": 24,"lineChange": "none"},{"line": "import javax.xml.parsers.DocumentBuilderFactory;\n","lineNumber": 25,"lineChange": "none"},{"line": "import java.io.File;\n","lineNumber": 26,"lineChange": "none"},{"line": "\n","lineNumber": 27,"lineChange": "none"},{"line": "public class DataPublisherUtil {\n","lineNumber": 28,"lineChange": "none"},{"line": "\n","lineNumber": 29,"lineChange": "none"},{"line": "    public static Document convertToDocument(File file) throws DataPublisherConfigurationException {\n","lineNumber": 30,"lineChange": "none"},{"line": "        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n","lineNumber": 31,"lineChange": "none"},{"line": "        factory.setNamespaceAware(true);\n","lineNumber": 32,"lineChange": "none"},{"line": "        try {\n","lineNumber": 33,"lineChange": "none"},{"line": "            DocumentBuilder docBuilder = factory.newDocumentBuilder();\n","lineNumber": 34,"lineChange": "none"},{"line": "            factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n","lineNumber": 35,"lineChange": "added"},{"line": "            return docBuilder.parse(file);\n","lineNumber": 36,"lineChange": "none"}]},{"commitURL": "https://github.com/OpenOLAT/OpenOLAT/commit/a89d6adbb1ce9da9af7c987b61f19260fc4e0e6c?diff=split#diff-dcc6f458c28dadd022401d2b8275867afc3a023bfd3135b73ff1290661af516bL-1","lines": [{"line": "\tparser.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n","lineNumber": 120,"lineChange": "added"},{"line": "\tparser.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n","lineNumber": 121,"lineChange": "added"},{"line": "\tparser.setFeature(\"http://xml.org/sax/features/validation\", false);\n","lineNumber": 122,"lineChange": "none"},{"line": "} catch(Exception e) {\n","lineNumber": 123,"lineChange": "none"},{"line": "\tlog.error(\"Cannot deactivate validation\", e);\n","lineNumber": 124,"lineChange": "none"},{"line": "}\n","lineNumber": 125,"lineChange": "none"},{"line": "parser.parse(new InputSource(stream));\n","lineNumber": 126,"lineChange": "none"}]}],"exampleCommitDescriptions": [],"precision": "very-high","repoDatasetSize": 58,"cwe": ["CWE-611"]}},{"id": "java/Deserialization","name": "Deserialization","shortDescription": {"text": "Deserialization of Untrusted Data"},"defaultConfiguration": {"level": "error"},"help": {"markdown": "## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\n\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n\n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).","text": ""},"properties": {"tags": ["java","Deserialization","Security","SourceServer","SourceHttpBody","Taint"],"categories": ["Security"],"exampleCommitFixes": [{"commitURL": "https://github.com/rdrey/LoBReTiMMGaP/commit/e4f63073a593c7c8b7a4fada9a47c364e87177d2?diff=split#diff-8af010b0efb53da5ddef9791690aafa488a1293eae0e1ee4d342eb5a695c7eb9L-1","lines": [{"line": "in = new ObjectInputStream(socket.getInputStream());\n","lineNumber": 48,"lineChange": "removed"},{"line": "in = socket.getInputStream();\n","lineNumber": 54,"lineChange": "added"}]},{"commitURL": "https://github.com/debezium/debezium-incubator/commit/f63fc9135ad7225b2e01b79bab0933e52e328639?diff=split#diff-4f79624db1bcaacfd2db3678cbf647fae1647c9bdfa0d0682b5640f991fc101aL-1","lines": [{"line": "Map<String, Object> props = new Yaml().load(fis);\n","lineNumber": 56,"lineChange": "removed"},{"line": "Properties props = new Properties();\n","lineNumber": 56,"lineChange": "added"},{"line": "props.load(fis);\n","lineNumber": 57,"lineChange": "added"},{"line": "fis.close();\n","lineNumber": 58,"lineChange": "added"}]},{"commitURL": "https://github.com/dataspread/dataspread-web/commit/660e5d304050ddb44c1c8c6a6da4d60557e1ebbc?diff=split#diff-265fdf7f44a6ed48947f623af118676d522093203c3a578ca4b5044f9521efb8L-1","lines": [{"line": "ResultSet rs = stmt.executeQuery();\n","lineNumber": 221,"lineChange": "none"},{"line": "if (rs.next()) {\n","lineNumber": 222,"lineChange": "removed"},{"line": "    if (useKryo) {\n","lineNumber": 223,"lineChange": "removed"},{"line": "        Input in = new Input(rs.getBytes(1));\n","lineNumber": 224,"lineChange": "removed"},{"line": "        Integer block_id = kryo.readObject(in, Integer.class);\n","lineNumber": 225,"lineChange": "removed"},{"line": "        in.close();\n","lineNumber": 226,"lineChange": "removed"},{"line": "        result.add(block_id);\n","lineNumber": 227,"lineChange": "removed"},{"line": "    } else {\n","lineNumber": 228,"lineChange": "removed"},{"line": "        ObjectMapper mapper = new ObjectMapper();\n","lineNumber": 229,"lineChange": "removed"},{"line": "        String value = new String(rs.getBytes(1));\n","lineNumber": 230,"lineChange": "removed"},{"line": "        mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n","lineNumber": 231,"lineChange": "removed"},{"line": "        Integer block_id = mapper.readValue(value, Integer.class);\n","lineNumber": 232,"lineChange": "removed"},{"line": "        result.add(block_id);\n","lineNumber": 233,"lineChange": "removed"},{"line": "    }\n","lineNumber": 234,"lineChange": "removed"},{"line": "while (rs.next()) {\n","lineNumber": 222,"lineChange": "added"},{"line": "    result.add(Integer.valueOf(new String(rs.getBytes(1))));\n","lineNumber": 223,"lineChange": "added"}]}],"exampleCommitDescriptions": [],"precision": "very-high","repoDatasetSize": 32,"cwe": ["CWE-502"]}},{"id": "java/JndiInjection","name": "JndiInjection","shortDescription": {"text": "Java Naming and Directory Interface (JNDI) Injection"},"defaultConfiguration": {"level": "error"},"help": {"markdown": "## Details\n\nJava Naming and Directory Interface (JNDI) is an application programming interface (API) that provides naming and directory functionality to applications written using the Java programming language. User provided data can be provided to look up data and resources (in the form of Java objects) via a name. This may result in a Java Naming and Directory Interface (JNDI) Injection vulnerability.\n\n### Best practices for prevention\n- Don't pass untrusted data to JNDI Lookup Functions.\n\n## Best practices for prevention\n* [JNDI injection in Java](https://cwe.mitre.org/data/definitions/215.html)\n* [The Log4j vulnerability and its impact on software supply chain security](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.developerexceptionpageextensions.usedeveloperexceptionpage?view=aspnetcore-5.0)","text": ""},"properties": {"tags": ["java","JndiInjection","Security","SourceServer","SourceHttpParam","Taint"],"categories": ["Security"],"exampleCommitFixes": [{"commitURL": "https://github.com/munin-monitoring/munin/commit/480ec3d6a2ace2d2816fda204a91f55e2571c8c9?diff=split#diff-d7d65482f6800f6ffee366753d334011d2274486a1d0df1c85db8515fce4d70fL-1","lines": [{"line": "String[] connectionInfo = ConfReader.GetConnectionInfo(args[0]);\n","lineNumber": 12,"lineChange": "removed"},{"line": "String[] connectionInfo = ConfReader.GetConnectionInfo();\n","lineNumber": 12,"lineChange": "added"},{"line": "    if (args.length == 1) {\n","lineNumber": 13,"lineChange": "none"},{"line": "        if (args[0].equals(\"config\")) {\n","lineNumber": 14,"lineChange": "none"},{"line": "            System.out.println(\n","lineNumber": 15,"lineChange": "none"},{"line": "\t\"graph_title Java (port \" + connectionInfo[1] + \") Uptime\\n\" +\n","lineNumber": 16,"lineChange": "none"},{"line": "\"graph_vlabel Days\\n\" +\n","lineNumber": 17,"lineChange": "none"},{"line": "\"graph_info Uptime of the Java virtual machine in days.\\n\" +\n","lineNumber": 18,"lineChange": "none"},{"line": "\"graph_category \" + connectionInfo[2] + \"\\n\" +\n","lineNumber": 19,"lineChange": "none"},{"line": "\"Uptime.label Uptime\");\n","lineNumber": 20,"lineChange": "none"},{"line": "    }\n","lineNumber": 21,"lineChange": "none"},{"line": " else {\n","lineNumber": 22,"lineChange": "none"},{"line": "    try {\n","lineNumber": 23,"lineChange": "none"},{"line": "        JMXServiceURL u = new JMXServiceURL(\"service:jmx:rmi:///jndi/rmi://\" + connectionInfo[0] + \":\" + connectionInfo[1]+ \"/jmxrmi\");\n","lineNumber": 24,"lineChange": "none"}]},{"commitURL": "https://github.com/munin-monitoring/munin/commit/480ec3d6a2ace2d2816fda204a91f55e2571c8c9?diff=split#diff-4294dd80ac8e7037b89e2e56e1404610bffca1198c4b65f785ab816f13547cb3L-1","lines": [{"line": "               String[] connectionInfo = ConfReader.GetConnectionInfo(args[0]);\n","lineNumber": 34,"lineChange": "removed"},{"line": "               String[] connectionInfo = ConfReader.GetConnectionInfo();\n","lineNumber": 34,"lineChange": "added"},{"line": "\n","lineNumber": 35,"lineChange": "none"},{"line": "            try {\n","lineNumber": 36,"lineChange": "none"},{"line": "\n","lineNumber": 37,"lineChange": "none"},{"line": "                JMXServiceURL u = new JMXServiceURL(\"service:jmx:rmi:///jndi/rmi://\" + connectionInfo[0] + \":\" + connectionInfo[1]+ \"/jmxrmi\");\n","lineNumber": 38,"lineChange": "none"}]},{"commitURL": "https://github.com/munin-monitoring/munin/commit/480ec3d6a2ace2d2816fda204a91f55e2571c8c9?diff=split#diff-f8b450d38a6cf7b698ae083e02ef53b642c7bf4ed815ccf31b57acb3aa1d1f8cL-1","lines": [{"line": "                  String[] connectionInfo = ConfReader.GetConnectionInfo(args[0]);\n","lineNumber": 41,"lineChange": "removed"},{"line": "                  String[] connectionInfo = ConfReader.GetConnectionInfo();\n","lineNumber": 41,"lineChange": "added"},{"line": "            try {\n","lineNumber": 42,"lineChange": "none"},{"line": "\n","lineNumber": 43,"lineChange": "none"},{"line": "                JMXServiceURL u = new JMXServiceURL(\"service:jmx:rmi:///jndi/rmi://\" + connectionInfo[0] + \":\" + connectionInfo[1]+ \"/jmxrmi\");\n","lineNumber": 44,"lineChange": "none"}]}],"exampleCommitDescriptions": [],"precision": "very-high","repoDatasetSize": 1,"cwe": ["CWE-074"]}},{"id": "java/NonCryptoHardcodedSecret","name": "NonCryptoHardcodedSecret","shortDescription": {"text": "Use of Hardcoded, Security-relevant Constants"},"defaultConfiguration": {"level": "error"},"help": {"markdown": "## Details\n\nWhen constants are hardcoded into applications, this information could easily be reverse-engineered and become known to attackers. For example, if a breached authentication token is hardcoded in multiple places in the application, it may lead to components of the application remaining vulnerable if not all instances are changed.\nAnother negative effect of hard-coding constants is potential unpredictability in the application's performance if the development team fails to update every single instance of the hardcoded constant throughout the code. For these reasons, hard-coding security-relevant constants is considered bad coding practice and should be remedied if present and avoided in future.\n\n## Best practices for prevention\n* Never hard code security-related constants; use symbolic names or configuration lookup files.\n* As hard coding is often done by coders working alone on a small scale, examine all legacy code components and test carefully when scaling.\n* Adopt a \"future-proof code\" mindset: While use of constants may save a little time now and make development simpler in the short term, it could cost time and money adapting to scale or other unforeseen circumstances (such as new hardware) in the future.","text": ""},"properties": {"tags": ["java","NonCryptoHardcodedSecret","Security"],"categories": ["Security"],"exampleCommitFixes": [{"commitURL": "https://github.com/tronprotocol/java-tron/commit/84148c19e3d15f344fc164913be5bee478c1f637?diff=split#diff-9ff136527c21b19349c00267ff04c85b76dae23a2d28bc0f17a7c5b2eac78565L-1","lines": [{"line": "private String ownerAddress = \"TDZdB4ogHSgU1CGrun8WXaMb2QDDkvAKQm\";\n","lineNumber": 17,"lineChange": "removed"},{"line": "private String ownerAddress = Configuration.getByPath(\"stress.conf\").getString(\"address.exchangeOwnerAddress\");\n","lineNumber": 18,"lineChange": "added"},{"line": "private long exchangeID = commonexchangeid;\n","lineNumber": 19,"lineChange": "none"},{"line": "private long quant = 1000000L;\n","lineNumber": 20,"lineChange": "none"},{"line": "private String privateKey = \"549c7797b351e48ab1c6bb5857138b418012d97526fc2acba022357d49c93ac0\";\n","lineNumber": 20,"lineChange": "removed"},{"line": "private String privateKey = Configuration.getByPath(\"stress.conf\").getString(\"privateKey.exchangeOwnerKey\");\n","lineNumber": 21,"lineChange": "added"}]},{"commitURL": "https://github.com/shuxianfeng/movision/commit/5ee84a05bac382bea508e6a42da3330b1ccf4371?diff=split#diff-bdd70437062ccb0d3735e4c014d182875ef0c029af6c9c8c3e2a42e4136d410fL-1","lines": [{"line": "        String accessKeyId = \"LTAITI0FOKgMZQty\";\n","lineNumber": 15,"lineChange": "removed"},{"line": "        String accessKeySecret = \"5x12H1yASg31OlPanhTCg0z0PzNr3t\";\n","lineNumber": 16,"lineChange": "removed"},{"line": "        String accessKeyId = PropertiesLoader.getValue(\"access.key.id\");\n","lineNumber": 17,"lineChange": "added"},{"line": "        String accessKeySecret = PropertiesLoader.getValue(\"access.key.secret\");\n","lineNumber": 18,"lineChange": "added"},{"line": "\n","lineNumber": 19,"lineChange": "added"}]},{"commitURL": "https://github.com/xiexianbin/UEditor-for-aliyun-OSS/commit/324d6fd48c4c99d43ac30545ba30f9736b505c61?diff=split#diff-4d95e836c61d2ea3ffdda0f95df204e45f3b74f5ba58cb53c85cdb5114efa29fL-1","lines": [{"line": "static {\r\n","lineNumber": 17,"lineChange": "added"},{"line": "String OSSKeyPath = SystemUtil.getProjectClassesPath() + \"OSSKey.properties\";\r\n","lineNumber": 18,"lineChange": "added"},{"line": "// 生成文件输入流\r\n","lineNumber": 19,"lineChange": "added"},{"line": "FileInputStream inpf = null;\r\n","lineNumber": 20,"lineChange": "added"},{"line": "try {\r\n","lineNumber": 21,"lineChange": "added"},{"line": "    inpf = new FileInputStream(new File(OSSKeyPath));\r\n","lineNumber": 22,"lineChange": "added"},{"line": "    OSSKeyProperties.load(inpf);\r\n","lineNumber": 23,"lineChange": "added"},{"line": "    useStatus = (Boolean) OSSKeyProperties.get(\"useStatus\");\r\n","lineNumber": 24,"lineChange": "added"},{"line": "    key = (String) OSSKeyProperties.get(\"key\");\r\n","lineNumber": 25,"lineChange": "added"},{"line": "    secret = (String) OSSKeyProperties.get(\"secret\");\r\n","lineNumber": 26,"lineChange": "added"},{"line": "    endPoint = (String) OSSKeyProperties.get(\"endPoint\");\r\n","lineNumber": 27,"lineChange": "added"},{"line": "} catch (Exception e) {\r\n","lineNumber": 28,"lineChange": "added"},{"line": "    e.printStackTrace();\r\n","lineNumber": 29,"lineChange": "added"},{"line": "}\r\n","lineNumber": 30,"lineChange": "added"},{"line": "}\r\n","lineNumber": 31,"lineChange": "added"}]}],"exampleCommitDescriptions": [],"precision": "very-high","repoDatasetSize": 33,"cwe": ["CWE-547"]}},{"id": "java/PT","name": "PT","shortDescription": {"text": "Path Traversal"},"defaultConfiguration": {"level": "error"},"help": {"markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```","text": ""},"properties": {"tags": ["java","PT","Security","SourceServer","SourceHttpParam","Taint"],"categories": ["Security"],"exampleCommitFixes": [{"commitURL": "https://github.com/igniterealtime/Spark/commit/1a41205f5bc095c1e1cb2bd3a06d930ebdbfe376?diff=split#diff-e6cdbf4191c877a05be8c6795c7581a31c24ac5b979438da1d9414e9f812db6cL-1","lines": [{"line": "if (!entryFile.toPath().normalize().startsWith(dir.toPath().normalize())) {\n","lineNumber": 541,"lineChange": "added"},{"line": "    throw new RuntimeException(\"Bad zip entry\");\n","lineNumber": 542,"lineChange": "added"},{"line": "}\n","lineNumber": 543,"lineChange": "added"},{"line": "\t\t\t\t// Ignore any manifest.mf entries.\n","lineNumber": 544,"lineChange": "none"},{"line": "\t\t\t\tif (entry.getName().toLowerCase().endsWith(\"manifest.mf\")) {\n","lineNumber": 545,"lineChange": "none"},{"line": "\t\t\t\t\tcontinue;\n","lineNumber": 546,"lineChange": "none"},{"line": "\t\t\t\t}\n","lineNumber": 547,"lineChange": "none"},{"line": "\n","lineNumber": 548,"lineChange": "none"},{"line": "\t\t\t\tif (entry.isDirectory() && rootDirectory == null) {\n","lineNumber": 549,"lineChange": "none"},{"line": "\t\t\t\t\trootDirectory = entryFile;\n","lineNumber": 550,"lineChange": "none"},{"line": "\t\t\t\t}\n","lineNumber": 551,"lineChange": "none"},{"line": "\n","lineNumber": 552,"lineChange": "none"},{"line": "\t\t\t\tif (!entry.isDirectory()) {\n","lineNumber": 553,"lineChange": "none"},{"line": "\t\t\t\t\tentryFile.getParentFile().mkdirs();\n","lineNumber": 554,"lineChange": "none"}]},{"commitURL": "https://github.com/eugenp/tutorials/commit/917c64307ac18bd638ff65e500e7398efb2fdf36?diff=split#diff-3bfb9fca9702c728deff6acb4b6d954f30a7bf0f31fd8f5a3085210b0957af8cL-1","lines": [{"line": "    final String fileZip = \"src/main/resources/compressed.zip\";\n","lineNumber": 11,"lineChange": "removed"},{"line": "    final String fileZip = \"src/main/resources/unzipTest/compressed.zip\";\n","lineNumber": 11,"lineChange": "added"},{"line": "    final File destDir = new File(\"src/main/resources/unzipTest\");\n","lineNumber": 12,"lineChange": "added"},{"line": "    final byte[] buffer = new byte[1024];\n","lineNumber": 13,"lineChange": "none"},{"line": "    final ZipInputStream zis = new ZipInputStream(new FileInputStream(fileZip));\n","lineNumber": 14,"lineChange": "none"},{"line": "    ZipEntry zipEntry = zis.getNextEntry();\n","lineNumber": 15,"lineChange": "none"},{"line": "    while (zipEntry != null) {\n","lineNumber": 16,"lineChange": "none"},{"line": "        final String fileName = zipEntry.getName();\n","lineNumber": 16,"lineChange": "removed"},{"line": "        final File newFile = new File(\"src/main/resources/unzipTest/\" + fileName);\n","lineNumber": 17,"lineChange": "removed"},{"line": "        final File newFile = newFile(destDir, zipEntry);\n","lineNumber": 17,"lineChange": "added"},{"line": "        final FileOutputStream fos = new FileOutputStream(newFile);\n","lineNumber": 18,"lineChange": "none"},{"line": "        int len;\n","lineNumber": 19,"lineChange": "none"},{"line": "        while ((len = zis.read(buffer)) > 0) {\n","lineNumber": 20,"lineChange": "none"},{"line": "            fos.write(buffer, 0, len);\n","lineNumber": 21,"lineChange": "none"},{"line": "        }\n","lineNumber": 22,"lineChange": "none"},{"line": "        fos.close();\n","lineNumber": 23,"lineChange": "none"},{"line": "        zipEntry = zis.getNextEntry();\n","lineNumber": 24,"lineChange": "none"},{"line": "    }\n","lineNumber": 25,"lineChange": "none"},{"line": "    zis.closeEntry();\n","lineNumber": 26,"lineChange": "none"},{"line": "    zis.close();\n","lineNumber": 27,"lineChange": "none"},{"line": "}\n","lineNumber": 28,"lineChange": "none"},{"line": "\n","lineNumber": 29,"lineChange": "added"},{"line": "/**\n","lineNumber": 30,"lineChange": "added"},{"line": " * @see https://snyk.io/research/zip-slip-vulnerability\n","lineNumber": 31,"lineChange": "added"},{"line": " */\n","lineNumber": 32,"lineChange": "added"},{"line": "public static File newFile(File destinationDir, ZipEntry zipEntry) throws IOException {\n","lineNumber": 33,"lineChange": "added"},{"line": "    File destFile = new File(destinationDir, zipEntry.getName());\n","lineNumber": 34,"lineChange": "added"},{"line": "    \n","lineNumber": 35,"lineChange": "added"},{"line": "    String destDirPath = destinationDir.getCanonicalPath();\n","lineNumber": 36,"lineChange": "added"},{"line": "    String destFilePath = destFile.getCanonicalPath();\n","lineNumber": 37,"lineChange": "added"},{"line": "    \n","lineNumber": 38,"lineChange": "added"},{"line": "    if (!destFilePath.startsWith(destDirPath + File.separator)) {\n","lineNumber": 39,"lineChange": "added"},{"line": "        throw new IOException(\"Entry is outside of the target dir: \" + zipEntry.getName());\n","lineNumber": 40,"lineChange": "added"},{"line": "    }\n","lineNumber": 41,"lineChange": "added"},{"line": "    \n","lineNumber": 42,"lineChange": "added"},{"line": "    return destFile;\n","lineNumber": 43,"lineChange": "added"},{"line": "}\n","lineNumber": 44,"lineChange": "added"}]},{"commitURL": "https://github.com/kythe/kythe/commit/bc872ff20b1ab7f6cf8d6387599d1b3c359586eb?diff=split#diff-7b25efcb95c3cf280fd491c017ceefc58b99309118991921b23c7b50d7e0a75fL-1","lines": [{"line": "// Zip Slip fix courtesy of snyk.io/research/zip-slip-vulnerability.\n","lineNumber": 165,"lineChange": "added"},{"line": "String canonicalDirPath = targetDirectory.getCanonicalPath() + File.separator;\n","lineNumber": 166,"lineChange": "added"},{"line": "while (entries.hasMoreElements()) {\n","lineNumber": 167,"lineChange": "none"},{"line": "  final ZipEntry entry = entries.nextElement();\n","lineNumber": 168,"lineChange": "none"},{"line": "  File targetFile = new File(targetDirectory, entry.getName());\n","lineNumber": 169,"lineChange": "none"},{"line": "  String canonicalFilePath = targetFile.getCanonicalPath();\n","lineNumber": 170,"lineChange": "added"},{"line": "  if (!canonicalFilePath.startsWith(canonicalDirPath)) {\n","lineNumber": 171,"lineChange": "added"},{"line": "    throw new IllegalArgumentException(\n","lineNumber": 172,"lineChange": "added"},{"line": "        \"Zip archive trying to write file outside of target dir: \" + canonicalFilePath);\n","lineNumber": 173,"lineChange": "added"},{"line": "  }\n","lineNumber": 174,"lineChange": "added"},{"line": "  if (entry.isDirectory()) {\n","lineNumber": 175,"lineChange": "none"},{"line": "    if (!targetFile.isDirectory() && !targetFile.mkdirs()) {\n","lineNumber": 176,"lineChange": "none"}]}],"exampleCommitDescriptions": [],"precision": "very-high","repoDatasetSize": 51,"cwe": ["CWE-23"]}},{"id": "java/Reflection","name": "Reflection","shortDescription": {"text": "Unsafe Reflection"},"defaultConfiguration": {"level": "error"},"help": {"markdown": "\n## Details\n\nA number of modern programming languages have attempted to introduce efficiencies into the development process by introducing reflection, which allows code to dynamically examine or even modify code-including itself-as required based on runtime conditions. This creates great flexibility but must be leveraged correctly to avoid introducing risk. When this weakness exists, the user is able to transmit values to the server that are then used to select unintended classes or methods.\n\nThis could modify the control flow of the application leading to unpredictable behavior, including bypassing authentication and adding malicious behaviors. In Java, for example, unsafe reflection has typically been the primary way for attackers to bypass sandboxing security mechanisms and execute malicious code.\n\n## Best practices for prevention\n\n* Many developers suggest avoiding the use of reflection altogether.\n* Never trust user input. In this case, do not use user-supplied inputs for selecting or loading classes or code.\n* Because an attacker could supply such a broad range of parameters in a brute-force attempt to exploit this weakness, consider adopting an \"accept-known-good\" strategy: limiting input to an allowlist of acceptable classes or code where possible rather than attempting to sanitize input of all possible attack types.","text": ""},"properties": {"tags": ["java","Reflection","Security","SourceServer","SourceHttpParam","Taint"],"categories": ["Security"],"exampleCommitFixes": [{"commitURL": "https://github.com/wangyangjun/StreamBench/commit/8d8abb9da2dc61bdfbc39a546058af9d9b40b119?diff=split#diff-518b611ab4f2ec65a8b0295c4027e7ff97bf871796569427d2207cdf3bd34090L-1","lines": [{"line": "workloadClass = classLoader.loadClass(\"fi.aalto.dmg.workloads.\"+args[0]);\n","lineNumber": 53,"lineChange": "removed"},{"line": "workloadClass = classLoader.loadClass(WORKLOAD_PACKAGE+workload);\n","lineNumber": 33,"lineChange": "added"}]},{"commitURL": "https://github.com/sibvisions/jvx.kitchensink/commit/54b906167a36851891019fba1f825a74a107ade6?diff=split#diff-b5b6650a8b4731cea7079f7c741abeb780579de71aa0c0ab82e57e6fbd9bfbabL-1","lines": [{"line": "catch (Exception e)\r\n","lineNumber": 53,"lineChange": "added"},{"line": "{\r\n","lineNumber": 54,"lineChange": "added"},{"line": "\tfactoryClass = Main.class.getClassLoader().loadClass(\"com.sibvisions.rad.ui.swing.impl.SwingFactory\");\r\n","lineNumber": 55,"lineChange": "added"}]},{"commitURL": "https://github.com/devonfw/tools-cobigen/commit/af2a97d467528740c190f8b6851b45ba8a7fc33a?diff=split#diff-5feb00f100649728ece50c74a8dad0167615b57ad075f006755bd9ef5f64a987L-1","lines": [{"line": "Enumeration<URL> foundGeneratorPluginActivators = Thread.currentThread().getContextClassLoader()\n","lineNumber": 56,"lineChange": "removed"},{"line": "    .getResources(\"META-INF/services/\" + extensionType.getName());\n","lineNumber": 57,"lineChange": "removed"},{"line": "ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();\n","lineNumber": 56,"lineChange": "added"},{"line": "Enumeration<URL> foundGeneratorPluginActivators =\n","lineNumber": 57,"lineChange": "added"},{"line": "    contextClassLoader.getResources(\"META-INF/services/\" + extensionType.getName());\n","lineNumber": 58,"lineChange": "added"}]}],"exampleCommitDescriptions": [],"precision": "very-high","repoDatasetSize": 9,"cwe": ["CWE-470"]}}]}},"results": [{"ruleId": "java/CodeInjection","ruleIndex": 0,"level": "error","message": {"text":"Unsanitized input from an HTTP parameter flows into parseExpression, where it is executed as  code. This may result in a Code Injection vulnerability.","markdown":"Unsanitized input from {0} {1} into {2}, where it is executed as  code. This may result in a Code Injection vulnerability.","arguments": ["[an HTTP parameter](0)","[flows](1),(2)","[parseExpression](3)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":53,  "endLine":53,  "startColumn":33,  "endColumn":55}  }}],"fingerprints": {"0": "d76d2ec833c219637afc2ee21ba7a4da340356ab1021ab54bbdefa35129156fd","1": "b59230be.711b1436.9c3c33b9.27d81186.d4b83aa8.0d476878.7c7e597d.dc64e7b2.b59230be.4701c420.9c3c33b9.e22980a8.66281acf.0d476878.7c7e597d.54d46e25","identity": "10e0d893-d2b4-493c-9eed-ba7241377bec"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":51,  "endLine":51,  "startColumn":34,  "endColumn":65}}}},{"location": {"id": 1,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":51,  "endLine":51,  "startColumn":34,  "endColumn":65}}}},{"location": {"id": 2,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":53,  "endLine":53,  "startColumn":56,  "endColumn":59}}}},{"location": {"id": 3,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":53,  "endLine":53,  "startColumn":33,  "endColumn":55}}}}]}]}],"properties": {"isAutofixable": false,"priorityScore": 806,"priorityScoreFactors": [  {"label": true,"type": "hotFileSource"  },  {"label": true,"type": "fixExamples"  }]}},{"ruleId": "java/CommandInjection","ruleIndex": 1,"level": "error","message": {"text":"Unsanitized input from an HTTP parameter flows into exec, where it is used as a shell command. This may result in a Command Injection vulnerability.","markdown":"Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.","arguments": ["[an HTTP parameter](0)","[flows](1),(2)","[exec](3)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":61,  "endLine":61,  "startColumn":24,  "endColumn":49}  }}],"fingerprints": {"0": "0cec02a42ddcbdf6bbe860856517c6bf815c4ab6703caf32a464bb56ee442492","1": "16eea168.58fce070.a224ef38.58a2ef45.85980471.b368e0bf.df7e59ba.9ec902c1.19689298.7f413d6f.bb993ef0.c93ef281.49520b64.b368e0bf.5b1ccecb.54d46e25","identity": "96f877cb-8942-4c8e-b60a-52603df90b4d"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":59,  "endLine":59,  "startColumn":34,  "endColumn":65}}}},{"location": {"id": 1,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":59,  "endLine":59,  "startColumn":34,  "endColumn":65}}}},{"location": {"id": 2,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":61,  "endLine":61,  "startColumn":50,  "endColumn":53}}}},{"location": {"id": 3,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":61,  "endLine":61,  "startColumn":24,  "endColumn":49}}}}]}]}],"properties": {"isAutofixable": false,"priorityScore": 806,"priorityScoreFactors": [  {"label": true,"type": "hotFileSource"  },  {"label": true,"type": "fixExamples"  }]}},{"ruleId": "java/Sqli","ruleIndex": 3,"level": "error","message": {"text":"Unsanitized input from an HTTP parameter flows into createNativeQuery, where it is used in an SQL query. This may result in an SQL Injection vulnerability.","markdown":"Unsanitized input from {0} {1} into {2}, where it is used in an SQL query. This may result in an SQL Injection vulnerability.","arguments": ["[an HTTP parameter](0)","[flows](1),(2),(3),(4),(5),(6)","[createNativeQuery](7)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":50,  "endLine":50,  "startColumn":29,  "endColumn":49}  }}],"fingerprints": {"0": "a79c099328b8a5898a74e2444be22c1c7e055ea4543815dac614074310a67c0e","1": "19689298.83dbfe52.83693997.ff5f3aa3.9c64308b.4e254035.f189b689.77438af7.bbbd7c96.d918f6fd.e1a841bd.de031890.5b39032a.ce109560.726fe049.77438af7","identity": "06849a98-3cc5-44e1-89b3-cd882f2bd120"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":48,  "endLine":48,  "startColumn":43,  "endColumn":70}}}},{"location": {"id": 1,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":48,  "endLine":48,  "startColumn":43,  "endColumn":70}}}},{"location": {"id": 2,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":49,  "endLine":49,  "startColumn":63,  "endColumn":64}}}},{"location": {"id": 3,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":49,  "endLine":49,  "startColumn":22,  "endColumn":64}}}},{"location": {"id": 4,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":49,  "endLine":49,  "startColumn":22,  "endColumn":70}}}},{"location": {"id": 5,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":49,  "endLine":49,  "startColumn":16,  "endColumn":70}}}},{"location": {"id": 6,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":50,  "endLine":50,  "startColumn":50,  "endColumn":53}}}},{"location": {"id": 7,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":50,  "endLine":50,  "startColumn":29,  "endColumn":49}}}}]}]}],"properties": {"isAutofixable": true,"priorityScore": 806,"priorityScoreFactors": [  {"label": true,"type": "hotFileSource"  },  {"label": true,"type": "fixExamples"  }]}},{"ruleId": "java/Ssrf","ruleIndex": 4,"level": "error","message": {"text":"Unsanitized input from an HTTP parameter flows into getForObject, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.","markdown":"Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.","arguments": ["[an HTTP parameter](0)","[flows](1),(2)","[getForObject](3)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":104,  "endLine":104,  "startColumn":16,  "endColumn":33}  }}],"fingerprints": {"0": "cfa5d5719b8de8ee743ddf9efaab7a40f4abab20fff8ab13985679f4f2e9748e","1": "6434699b.2c978fb7.a224ef38.60f340cc.329645bc.0d476878.c41e2a02.53857506.6d351a63.5b48c5e9.92be5e0b.de031890.f0e1baa5.ce109560.52c98822.53857506","identity": "78e08f41-c5cd-4308-a278-5e1fef0b70a4"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":102,  "endLine":102,  "startColumn":35,  "endColumn":66}}}},{"location": {"id": 1,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":102,  "endLine":102,  "startColumn":35,  "endColumn":66}}}},{"location": {"id": 2,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":104,  "endLine":104,  "startColumn":34,  "endColumn":37}}}},{"location": {"id": 3,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":104,  "endLine":104,  "startColumn":16,  "endColumn":33}}}}]}]}],"properties": {"isAutofixable": false,"priorityScore": 806,"priorityScoreFactors": [  {"label": true,"type": "hotFileSource"  },  {"label": true,"type": "fixExamples"  }]}},{"ruleId": "java/XSS","ruleIndex": 5,"level": "error","message": {"text":"Unsanitized input from the HTTP request body flows into here, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).","markdown":"Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).","arguments": ["[the HTTP request body](0)","[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11)","[here](12)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":42,  "endLine":42,  "startColumn":16,  "endColumn":55}  }}],"fingerprints": {"0": "96fd0c946b16bedb25e6530d5528d2ed45565d2a959d965d353b98a818c5b978","1": "b49c0578.5302d6c6.f4c2b863.e22980a8.1672ff53.a1cba6c8.d2a01402.54d46e25.7db69e70.b2dd2f08.5f73edd4.de031890.1672ff53.ce109560.a1439b9f.96f2b075","identity": "fd7f0900-bba1-4bf0-978e-4f3224df36d7"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":37,  "endLine":37,  "startColumn":33,  "endColumn":56}}}},{"location": {"id": 1,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":37,  "endLine":37,  "startColumn":33,  "endColumn":56}}}},{"location": {"id": 2,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":41,  "endLine":41,  "startColumn":71,  "endColumn":74}}}},{"location": {"id": 3,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":41,  "endLine":41,  "startColumn":58,  "endColumn":70}}}},{"location": {"id": 4,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":41,  "endLine":41,  "startColumn":54,  "endColumn":75}}}},{"location": {"id": 5,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":41,  "endLine":41,  "startColumn":42,  "endColumn":53}}}},{"location": {"id": 6,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":41,  "endLine":41,  "startColumn":38,  "endColumn":76}}}},{"location": {"id": 7,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":41,  "endLine":41,  "startColumn":24,  "endColumn":37}}}},{"location": {"id": 8,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":41,  "endLine":41,  "startColumn":18,  "endColumn":77}}}},{"location": {"id": 9,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":42,  "endLine":42,  "startColumn":16,  "endColumn":19}}}},{"location": {"id": 10,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":42,  "endLine":42,  "startColumn":16,  "endColumn":38}}}},{"location": {"id": 11,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":42,  "endLine":42,  "startColumn":16,  "endColumn":55}}}},{"location": {"id": 12,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":42,  "endLine":42,  "startColumn":16,  "endColumn":55}}}}]}]}],"properties": {"isAutofixable": true,"priorityScore": 832,"priorityScoreFactors": [  {"label": true,"type": "multipleOccurrence"  },  {"label": true,"type": "hotFileSource"  },  {"label": true,"type": "fixExamples"  }]}},{"ruleId": "java/XSS","ruleIndex": 5,"level": "error","message": {"text":"Unsanitized input from an HTTP parameter flows into here, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).","markdown":"Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).","arguments": ["[an HTTP parameter](0)","[flows](1),(2),(3),(4),(5),(6)","[here](7)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":58,  "endLine":58,  "startColumn":16,  "endColumn":35}  }}],"fingerprints": {"0": "f2dcb9b5df0fc9319c9d52243c6a597db84d116dc86eac8c0e6a0670e5677824","1": "19689298.4701c420.9c3c33b9.e22980a8.6441080e.2c6887b2.c41e2a02.54d46e25.b59230be.b2dd2f08.5f73edd4.de031890.6441080e.ce109560.0ff0abc5.54d46e25","identity": "11f1c1e8-4d81-4549-8e9b-03a4b2c955fa"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":51,  "endLine":51,  "startColumn":34,  "endColumn":65}}}},{"location": {"id": 1,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":51,  "endLine":51,  "startColumn":34,  "endColumn":65}}}},{"location": {"id": 2,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":53,  "endLine":53,  "startColumn":56,  "endColumn":59}}}},{"location": {"id": 3,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":53,  "endLine":53,  "startColumn":33,  "endColumn":55}}}},{"location": {"id": 4,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":53,  "endLine":53,  "startColumn":20,  "endColumn":60}}}},{"location": {"id": 5,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":58,  "endLine":58,  "startColumn":16,  "endColumn":26}}}},{"location": {"id": 6,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":58,  "endLine":58,  "startColumn":16,  "endColumn":35}}}},{"location": {"id": 7,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":58,  "endLine":58,  "startColumn":16,  "endColumn":35}}}}]}]}],"properties": {"isAutofixable": true,"priorityScore": 832,"priorityScoreFactors": [  {"label": true,"type": "multipleOccurrence"  },  {"label": true,"type": "hotFileSource"  },  {"label": true,"type": "fixExamples"  }]}},{"ruleId": "java/XSS","ruleIndex": 5,"level": "error","message": {"text":"Unsanitized input from an HTTP parameter flows into here, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).","markdown":"Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).","arguments": ["[an HTTP parameter](0)","[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13)","[here](14)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/CodeQualityDemoController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":54,  "endLine":54,  "startColumn":16,  "endColumn":27}  }}],"fingerprints": {"0": "ad6cd090db0b0c2dd44ede920439c64ad9647e81c7e5246deaf47ff38c6b5cb5","1": "54a059af.349d5418.bb280ba3.e22980a8.d31a8364.535846ad.bae646e8.54d46e25.54a059af.b2dd2f08.5f73edd4.3149b057.d31a8364.7fda7c5e.bae646e8.54d46e25","identity": "b1f3d191-59a5-40b8-8225-ab0edab73752"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/CodeQualityDemoController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":43,  "endLine":43,  "startColumn":28,  "endColumn":61}}}},{"location": {"id": 1,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/CodeQualityDemoController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":43,  "endLine":43,  "startColumn":28,  "endColumn":61}}}},{"location": {"id": 2,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/CodeQualityDemoController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":46,  "endLine":46,  "startColumn":67,  "endColumn":71}}}},{"location": {"id": 3,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/CodeQualityDemoController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":46,  "endLine":46,  "startColumn":56,  "endColumn":66}}}},{"location": {"id": 4,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/CodeQualityDemoController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":46,  "endLine":46,  "startColumn":52,  "endColumn":72}}}},{"location": {"id": 5,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/CodeQualityDemoController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":46,  "endLine":46,  "startColumn":37,  "endColumn":51}}}},{"location": {"id": 6,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/CodeQualityDemoController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":46,  "endLine":46,  "startColumn":28,  "endColumn":73}}}},{"location": {"id": 7,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/CodeQualityDemoController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":48,  "endLine":48,  "startColumn":28,  "endColumn":30}}}},{"location": {"id": 8,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/CodeQualityDemoController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":48,  "endLine":48,  "startColumn":28,  "endColumn":39}}}},{"location": {"id": 9,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/CodeQualityDemoController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":49,  "endLine":49,  "startColumn":27,  "endColumn":31}}}},{"location": {"id": 10,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/CodeQualityDemoController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":49,  "endLine":49,  "startColumn":17,  "endColumn":19}}}},{"location": {"id": 11,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/CodeQualityDemoController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":49,  "endLine":49,  "startColumn":17,  "endColumn":26}}}},{"location": {"id": 12,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/CodeQualityDemoController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":54,  "endLine":54,  "startColumn":16,  "endColumn":18}}}},{"location": {"id": 13,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/CodeQualityDemoController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":54,  "endLine":54,  "startColumn":16,  "endColumn":27}}}},{"location": {"id": 14,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/CodeQualityDemoController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":54,  "endLine":54,  "startColumn":16,  "endColumn":27}}}}]}]}],"properties": {"isAutofixable": true,"priorityScore": 832,"priorityScoreFactors": [  {"label": true,"type": "multipleOccurrence"  },  {"label": true,"type": "hotFileSource"  },  {"label": true,"type": "fixExamples"  }]}},{"ruleId": "java/XSS","ruleIndex": 5,"level": "error","message": {"text":"Unsanitized input from an HTTP parameter flows into here, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).","markdown":"Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).","arguments": ["[an HTTP parameter](0)","[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18)","[here](19)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":71,  "endLine":71,  "startColumn":20,  "endColumn":32}  }}],"fingerprints": {"0": "68f040527853786f7d434dd3f835066adf207535dd1d4d482177b9399302a4b3","1": "54a059af.83dbfe52.fc7d5400.e22980a8.d31a8364.1ca6e5b4.bae646e8.54d46e25.54a059af.b2dd2f08.5f73edd4.de031890.d31a8364.31c50941.bae646e8.54d46e25","identity": "d785a837-91eb-4bf5-bcf9-067e8c99a507"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":59,  "endLine":59,  "startColumn":34,  "endColumn":65}}}},{"location": {"id": 1,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":59,  "endLine":59,  "startColumn":34,  "endColumn":65}}}},{"location": {"id": 2,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":61,  "endLine":61,  "startColumn":50,  "endColumn":53}}}},{"location": {"id": 3,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":61,  "endLine":61,  "startColumn":24,  "endColumn":49}}}},{"location": {"id": 4,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":61,  "endLine":61,  "startColumn":17,  "endColumn":54}}}},{"location": {"id": 5,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":65,  "endLine":65,  "startColumn":39,  "endColumn":43}}}},{"location": {"id": 6,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":65,  "endLine":65,  "startColumn":39,  "endColumn":58}}}},{"location": {"id": 7,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":65,  "endLine":65,  "startColumn":21,  "endColumn":38}}}},{"location": {"id": 8,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":65,  "endLine":65,  "startColumn":17,  "endColumn":61}}}},{"location": {"id": 9,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":64,  "endLine":64,  "startColumn":42,  "endColumn":56}}}},{"location": {"id": 10,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":64,  "endLine":65,  "startColumn":29,  "endColumn":62}}}},{"location": {"id": 11,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":68,  "endLine":68,  "startColumn":28,  "endColumn":34}}}},{"location": {"id": 12,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":68,  "endLine":68,  "startColumn":28,  "endColumn":43}}}},{"location": {"id": 13,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":69,  "endLine":69,  "startColumn":28,  "endColumn":32}}}},{"location": {"id": 14,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":69,  "endLine":69,  "startColumn":17,  "endColumn":20}}}},{"location": {"id": 15,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":69,  "endLine":69,  "startColumn":17,  "endColumn":27}}}},{"location": {"id": 16,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":69,  "endLine":69,  "startColumn":17,  "endColumn":40}}}},{"location": {"id": 17,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":71,  "endLine":71,  "startColumn":20,  "endColumn":23}}}},{"location": {"id": 18,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":71,  "endLine":71,  "startColumn":20,  "endColumn":32}}}},{"location": {"id": 19,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":71,  "endLine":71,  "startColumn":20,  "endColumn":32}}}}]}]}],"properties": {"isAutofixable": true,"priorityScore": 832,"priorityScoreFactors": [  {"label": true,"type": "multipleOccurrence"  },  {"label": true,"type": "hotFileSource"  },  {"label": true,"type": "fixExamples"  }]}},{"ruleId": "java/XSS","ruleIndex": 5,"level": "error","message": {"text":"Unsanitized input from an HTTP parameter flows into here, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).","markdown":"Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).","arguments": ["[an HTTP parameter](0)","[flows](1),(2),(3)","[here](4)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":104,  "endLine":104,  "startColumn":16,  "endColumn":33}  }}],"fingerprints": {"0": "dc31e17b442e126e9800a7c53be210a270ca506a32bca33b9d90b4a597fbae55","1": "6d351a63.5b48c5e9.92be5e0b.de031890.f1d9f854.ce109560.52c98822.53857506.6d351a63.b2dd2f08.5f73edd4.de031890.5b39032a.ce109560.52c98822.9fb08828","identity": "79c9fda7-b67e-41fa-83fc-ef8fbdd5539d"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":102,  "endLine":102,  "startColumn":35,  "endColumn":66}}}},{"location": {"id": 1,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":102,  "endLine":102,  "startColumn":35,  "endColumn":66}}}},{"location": {"id": 2,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":104,  "endLine":104,  "startColumn":34,  "endColumn":37}}}},{"location": {"id": 3,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":104,  "endLine":104,  "startColumn":16,  "endColumn":33}}}},{"location": {"id": 4,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":104,  "endLine":104,  "startColumn":16,  "endColumn":33}}}}]}]}],"properties": {"isAutofixable": true,"priorityScore": 832,"priorityScoreFactors": [  {"label": true,"type": "multipleOccurrence"  },  {"label": true,"type": "hotFileSource"  },  {"label": true,"type": "fixExamples"  }]}},{"ruleId": "java/XSS","ruleIndex": 5,"level": "error","message": {"text":"Unsanitized input from an HTTP parameter flows into here, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).","markdown":"Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).","arguments": ["[an HTTP parameter](0)","[flows](1),(2),(3),(4)","[here](5)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":114,  "endLine":114,  "startColumn":16,  "endColumn":80}  }}],"fingerprints": {"0": "b16a51dbfe2bc0dc96fff982358e977caeb1601cb15d4f1d67236dcfa692b348","1": "e6fcc0e0.37114012.fc7d5400.e22980a8.f5f4a140.249e832d.2ed7aa4c.775ab50f.bbbd7c96.37114012.5f73edd4.de031890.5b39032a.ce109560.0779b355.96f2b075","identity": "96bec7b7-e108-44b0-aa2e-a96fa6373bb8"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":113,  "endLine":113,  "startColumn":33,  "endColumn":64}}}},{"location": {"id": 1,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":113,  "endLine":113,  "startColumn":33,  "endColumn":64}}}},{"location": {"id": 2,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":114,  "endLine":114,  "startColumn":54,  "endColumn":57}}}},{"location": {"id": 3,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":114,  "endLine":114,  "startColumn":16,  "endColumn":57}}}},{"location": {"id": 4,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":114,  "endLine":114,  "startColumn":16,  "endColumn":80}}}},{"location": {"id": 5,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":114,  "endLine":114,  "startColumn":16,  "endColumn":80}}}}]}]}],"properties": {"isAutofixable": true,"priorityScore": 832,"priorityScoreFactors": [  {"label": true,"type": "multipleOccurrence"  },  {"label": true,"type": "hotFileSource"  },  {"label": true,"type": "fixExamples"  }]}},{"ruleId": "java/XXE","ruleIndex": 6,"level": "error","message": {"text":"Unsanitized input from the HTTP request body flows into parse, which allows expansion of external entity references. This may result in a XXE attack leading to the disclosure of confidential data or denial of service.","markdown":"Unsanitized input from {0} {1} into {2}, which allows expansion of external entity references. This may result in a XXE attack leading to the disclosure of confidential data or denial of service.","arguments": ["[the HTTP request body](0)","[flows](1),(2),(3),(4),(5),(6)","[parse](7)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":41,  "endLine":41,  "startColumn":24,  "endColumn":37}  }}],"fingerprints": {"0": "da25016196a7a1a153516badbc49796efbc601189b098332fd22b58dbc5e0e89","1": "a1092ece.2dc1799a.1f40ac13.6c52ae28.1672ff53.a1cba6c8.a1439b9f.55425d48.19689298.5302d6c6.8920a32d.fd867172.1672ff53.0d476878.a1439b9f.54d46e25","identity": "9dfd223c-f58e-4338-93a6-00244e575ef8"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":37,  "endLine":37,  "startColumn":33,  "endColumn":56}}}},{"location": {"id": 1,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":37,  "endLine":37,  "startColumn":33,  "endColumn":56}}}},{"location": {"id": 2,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":41,  "endLine":41,  "startColumn":71,  "endColumn":74}}}},{"location": {"id": 3,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":41,  "endLine":41,  "startColumn":58,  "endColumn":70}}}},{"location": {"id": 4,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":41,  "endLine":41,  "startColumn":54,  "endColumn":75}}}},{"location": {"id": 5,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":41,  "endLine":41,  "startColumn":42,  "endColumn":53}}}},{"location": {"id": 6,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":41,  "endLine":41,  "startColumn":38,  "endColumn":76}}}},{"location": {"id": 7,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":41,  "endLine":41,  "startColumn":24,  "endColumn":37}}}}]}]}],"properties": {"isAutofixable": true,"priorityScore": 806,"priorityScoreFactors": [  {"label": true,"type": "hotFileSource"  },  {"label": true,"type": "fixExamples"  }]}},{"ruleId": "java/Deserialization","ruleIndex": 7,"level": "error","message": {"text":"Unsanitized input from the HTTP request body flows into java.io.ObjectInputStream, where it is used to deserialize an object. This may result in an Unsafe Deserialization vulnerability.","markdown":"Unsanitized input from {0} {1} into {2}, where it is used to deserialize an object. This may result in an Unsafe Deserialization vulnerability.","arguments": ["[the HTTP request body](0)","[flows](1),(2),(3),(4)","[java.io.ObjectInputStream](5)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":92,  "endLine":92,  "startColumn":42,  "endColumn":59}  }}],"fingerprints": {"0": "1f78516036b1b457ce98c4e8099ec921fdfda43bc57dd16fbf98a08703112f68","1": "b05546b8.97acdc08.48380386.6c52ae28.6bacdef5.4cdc7c2d.4a120e19.203bd690.b05546b8.7f413d6f.622565c7.e22980a8.d31a8364.4cdc7c2d.4a120e19.f10ae4e8","identity": "5bed533f-5cab-4498-a5ce-7af6cee6e1a8"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":91,  "endLine":91,  "startColumn":41,  "endColumn":68}}}},{"location": {"id": 1,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":91,  "endLine":91,  "startColumn":41,  "endColumn":68}}}},{"location": {"id": 2,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":92,  "endLine":92,  "startColumn":85,  "endColumn":92}}}},{"location": {"id": 3,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":92,  "endLine":92,  "startColumn":64,  "endColumn":84}}}},{"location": {"id": 4,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":92,  "endLine":92,  "startColumn":60,  "endColumn":93}}}},{"location": {"id": 5,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":92,  "endLine":92,  "startColumn":42,  "endColumn":59}}}}]}]}],"properties": {"isAutofixable": true,"priorityScore": 806,"priorityScoreFactors": [  {"label": true,"type": "hotFileSource"  },  {"label": true,"type": "fixExamples"  }]}},{"ruleId": "java/JndiInjection","ruleIndex": 8,"level": "error","message": {"text":"Unsanitized input from an HTTP parameter flows into lookup, where it is used to look up data and resources (in the form of Java objects) via a name. This may result in a Java Naming and Directory Interface (JNDI) Injection vulnerability.","markdown":"Unsanitized input from {0} {1} into {2}, where it is used to look up data and resources (in the form of Java objects) via a name. This may result in a Java Naming and Directory Interface (JNDI) Injection vulnerability.","arguments": ["[an HTTP parameter](0)","[flows](1),(2)","[lookup](3)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":70,  "endLine":70,  "startColumn":16,  "endColumn":26}  }}],"fingerprints": {"0": "1a5d2bb94d923e5ff705834902063fc6a289f036af261b9328992881a001dc03","1": "bd5b851f.a1e8f583.40bc5995.58a2ef45.6441080e.d714bca4.df7e59ba.09d05bb6.bd5b851f.61528139.40bc5995.31b2d067.6441080e.d714bca4.0779b355.54d46e25","identity": "70827b26-a737-4e50-a19c-91bcfb3dd128"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":67,  "endLine":67,  "startColumn":34,  "endColumn":67}}}},{"location": {"id": 1,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":67,  "endLine":67,  "startColumn":34,  "endColumn":67}}}},{"location": {"id": 2,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":70,  "endLine":70,  "startColumn":27,  "endColumn":31}}}},{"location": {"id": 3,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":70,  "endLine":70,  "startColumn":16,  "endColumn":26}}}}]}]}],"properties": {"isAutofixable": false,"priorityScore": 806,"priorityScoreFactors": [  {"label": true,"type": "hotFileSource"  },  {"label": true,"type": "fixExamples"  }]}},{"ruleId": "java/NonCryptoHardcodedSecret","ruleIndex": 9,"level": "error","message": {"text":"Avoid hardcoding values that are meant to be secret. Found hardcoded secret.","markdown":"Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.","arguments": ["[secret](0)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/CodeQualityDemoController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":119,  "endLine":119,  "startColumn":57,  "endColumn":99}  }}],"fingerprints": {"0": "626ae86d47b863c6106fe20b49d63c4b644307785bbbf5edf71fc59af49828a1","1": "e6fcc0e0.dd05ec30.305702f7.de031890.8b2d3351.ce109560.f0e0ed1a.db970c29.e6fcc0e0.dd05ec30.305702f7.de031890.bb61bed7.7193a6f6.803f1aac.63ed4c8b","identity": "ed48c8e2-c85e-4333-8dc9-2dc1eab5fb87"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/CodeQualityDemoController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":119,  "endLine":119,  "startColumn":57,  "endColumn":99}}}}]}]}],"properties": {"isAutofixable": false,"priorityScore": 806,"priorityScoreFactors": [  {"label": true,"type": "hotFileSource"  },  {"label": true,"type": "fixExamples"  }]}},{"ruleId": "java/PT","ruleIndex": 10,"level": "error","message": {"text":"Unsanitized input from an HTTP parameter flows into java.io.FileReader, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.","markdown":"Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.","arguments": ["[an HTTP parameter](0)","[flows](1),(2)","[java.io.FileReader](3)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/CodeQualityDemoController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":46,  "endLine":46,  "startColumn":56,  "endColumn":66}  }}],"fingerprints": {"0": "3903fc14892b3e5c84c827f21fd57f9d7eb2720afe75a963163b172ce4153c22","1": "ac4e7c8b.349d5418.a224ef38.6c52ae28.37f7030d.0d476878.df7e59ba.2343ac7f.dff89da8.7f413d6f.a224ef38.6c52ae28.f0e1baa5.0d476878.5b1ccecb.2343ac7f","identity": "4412b6ea-88cb-4a5c-9e7b-0f2c569a1409"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/CodeQualityDemoController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":43,  "endLine":43,  "startColumn":28,  "endColumn":61}}}},{"location": {"id": 1,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/CodeQualityDemoController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":43,  "endLine":43,  "startColumn":28,  "endColumn":61}}}},{"location": {"id": 2,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/CodeQualityDemoController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":46,  "endLine":46,  "startColumn":67,  "endColumn":71}}}},{"location": {"id": 3,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/CodeQualityDemoController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":46,  "endLine":46,  "startColumn":56,  "endColumn":66}}}}]}]}],"properties": {"isAutofixable": true,"priorityScore": 816,"priorityScoreFactors": [  {"label": true,"type": "multipleOccurrence"  },  {"label": true,"type": "hotFileSource"  },  {"label": true,"type": "fixExamples"  }]}},{"ruleId": "java/PT","ruleIndex": 10,"level": "error","message": {"text":"Unsanitized input from an HTTP parameter flows into java.io.FileReader, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.","markdown":"Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.","arguments": ["[an HTTP parameter](0)","[flows](1),(2)","[java.io.FileReader](3)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/CodeQualityDemoController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":63,  "endLine":63,  "startColumn":41,  "endColumn":51}  }}],"fingerprints": {"0": "79642e0e6d85d9f6522be87050ee76723af0c0b9761f5af8545a8353d3b4e3e8","1": "e410a9ec.cb878c2b.a224ef38.6c52ae28.77e23dcf.0d476878.df7e59ba.2343ac7f.e410a9ec.7f413d6f.a224ef38.6c52ae28.f0e1baa5.0d476878.0779b355.2343ac7f","identity": "63b3be57-f595-40e3-aa1b-4d6b5abeb050"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/CodeQualityDemoController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":59,  "endLine":59,  "startColumn":27,  "endColumn":60}}}},{"location": {"id": 1,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/CodeQualityDemoController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":59,  "endLine":59,  "startColumn":27,  "endColumn":60}}}},{"location": {"id": 2,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/CodeQualityDemoController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":63,  "endLine":63,  "startColumn":52,  "endColumn":56}}}},{"location": {"id": 3,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/CodeQualityDemoController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":63,  "endLine":63,  "startColumn":41,  "endColumn":51}}}}]}]}],"properties": {"isAutofixable": true,"priorityScore": 816,"priorityScoreFactors": [  {"label": true,"type": "multipleOccurrence"  },  {"label": true,"type": "hotFileSource"  },  {"label": true,"type": "fixExamples"  }]}},{"ruleId": "java/PT","ruleIndex": 10,"level": "error","message": {"text":"Unsanitized input from an HTTP parameter flows into java.nio.file.Files.readAllBytes, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.","markdown":"Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.","arguments": ["[an HTTP parameter](0)","[flows](1),(2),(3)","[java.nio.file.Files.readAllBytes](4)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":82,  "endLine":82,  "startColumn":27,  "endColumn":45}  }}],"fingerprints": {"0": "981ade65fdd4603c169ed0fb166ea7a3bc391f706019d857c4cd3845fa4901d2","1": "4e16b5e0.cb878c2b.1d105fb3.ede9cf8e.a1491c54.f940a352.6178e09e.abf6c9d5.8df8fa68.7f413d6f.622565c7.334c3b1f.f0e1baa5.0d476878.0779b355.54d46e25","identity": "75d53ac1-0215-4104-9f19-6132397d62e8"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":80,  "endLine":80,  "startColumn":38,  "endColumn":71}}}},{"location": {"id": 1,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":80,  "endLine":80,  "startColumn":38,  "endColumn":71}}}},{"location": {"id": 2,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":82,  "endLine":82,  "startColumn":56,  "endColumn":60}}}},{"location": {"id": 3,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":82,  "endLine":82,  "startColumn":46,  "endColumn":55}}}},{"location": {"id": 4,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":82,  "endLine":82,  "startColumn":27,  "endColumn":45}}}}]}]}],"properties": {"isAutofixable": true,"priorityScore": 816,"priorityScoreFactors": [  {"label": true,"type": "multipleOccurrence"  },  {"label": true,"type": "hotFileSource"  },  {"label": true,"type": "fixExamples"  }]}},{"ruleId": "java/Reflection","ruleIndex": 11,"level": "error","message": {"text":"Unsanitized input from an HTTP parameter flows into java.lang.Class.forName, where it is used for Reflection. This may result in an Unsafe Reflection vulnerability.","markdown":"Unsanitized input from {0} {1} into {2}, where it is used for Reflection. This may result in an Unsafe Reflection vulnerability.","arguments": ["[an HTTP parameter](0)","[flows](1),(2)","[java.lang.Class.forName](3)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":81,  "endLine":81,  "startColumn":26,  "endColumn":39}  }}],"fingerprints": {"0": "a8ec0537da91b4040619f2b5d09e6e3e5b0d545b3740e05341213afc690bc9f5","1": "ce449dd9.1cbd3ff4.231283a0.acdec820.2c34a094.0d476878.c7528ddc.158cb1e6.e1d7cd7c.bc22c35e.255d6190.acdec820.f0e1baa5.0d476878.0779b355.54d46e25","identity": "875106f8-48ef-4364-a980-b93a13c91eec"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":79,  "endLine":79,  "startColumn":37,  "endColumn":80}}}},{"location": {"id": 1,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":79,  "endLine":79,  "startColumn":37,  "endColumn":80}}}},{"location": {"id": 2,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":81,  "endLine":81,  "startColumn":40,  "endColumn":49}}}},{"location": {"id": 3,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/AdvancedVulnController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":81,  "endLine":81,  "startColumn":26,  "endColumn":39}}}}]}]}],"properties": {"isAutofixable": false,"priorityScore": 806,"priorityScoreFactors": [  {"label": true,"type": "hotFileSource"  },  {"label": true,"type": "fixExamples"  }]}},{"ruleId": "java/SpringCSRF","ruleIndex": 2,"level": "note","message": {"text":"The payload parameter is vulnerable to Cross Site Request Forgery (CSRF) attacks due to not using Spring Security. This could allow an attacker to execute requests on a user's behalf. Consider including Spring Security's CSRF protection within your application.","markdown":"The {0} parameter is vulnerable to Cross Site Request Forgery (CSRF) attacks due to not using Spring Security. This could allow an attacker to execute requests on a user's behalf. Consider including Spring Security's CSRF protection within your application.","arguments": ["[payload](0)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":91,  "endLine":91,  "startColumn":41,  "endColumn":68}  }}],"fingerprints": {"0": "0340876fbda64b3b45fc0f13ee14338ceb634ac7c691b9f9b1b60611ccc2633f","1": "b05546b8.7f413d6f.622565c7.6c52ae28.c0e417a5.0d476878.1a0c7c19.f10ae4e8.b05546b8.7f413d6f.622565c7.6c52ae28.c0e417a5.0d476878.1a0c7c19.f10ae4e8","identity": "59660005-0fff-4a31-b613-96597e04607d"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "src/main/java/com/example/contacts/controllers/ContactsController.java",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":91,  "endLine":91,  "startColumn":41,  "endColumn":68}}}}]}]}],"properties": {"isAutofixable": false,"priorityScore": 206,"priorityScoreFactors": [  {"label": true,"type": "hotFileSource"  }]}}],"properties": {"coverage": [{"files": 16,"isSupported": true,"lang": "Java","type": "SUPPORTED"},{"files": 1,"isSupported": true,"lang": "XML","type": "SUPPORTED"}]}}]}
